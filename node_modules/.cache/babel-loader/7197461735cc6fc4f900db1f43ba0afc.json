{"ast":null,"code":"import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nexport default class RealtimeSubscription {\n  constructor(topic) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let socket = arguments.length > 2 ? arguments[2] : undefined;\n    this.topic = topic;\n    this.params = params;\n    this.socket = socket;\n    this.bindings = [];\n    this.state = CHANNEL_STATES.closed;\n    this.joinedOnce = false;\n    this.pushBuffer = [];\n    this.timeout = this.socket.timeout;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.rejoinTimer = new Timer(() => this.rejoinUntilConnected(), this.socket.reconnectAfterMs);\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined;\n      this.rejoinTimer.reset();\n      this.pushBuffer.forEach(pushEvent => pushEvent.send());\n      this.pushBuffer = [];\n    });\n    this.onClose(() => {\n      this.rejoinTimer.reset();\n      this.socket.log('channel', `close ${this.topic} ${this.joinRef()}`);\n      this.state = CHANNEL_STATES.closed;\n      this.socket.remove(this);\n    });\n    this.onError(reason => {\n      if (this.isLeaving() || this.isClosed()) {\n        return;\n      }\n\n      this.socket.log('channel', `error ${this.topic}`, reason);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive('timeout', () => {\n      if (!this.isJoining()) {\n        return;\n      }\n\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this.on(CHANNEL_EVENTS.reply, (payload, ref) => {\n      this.trigger(this.replyEventName(ref), payload);\n    });\n  }\n\n  rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout();\n\n    if (this.socket.isConnected()) {\n      this.rejoin();\n    }\n  }\n\n  subscribe() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;\n    } else {\n      this.joinedOnce = true;\n      this.rejoin(timeout);\n      return this.joinPush;\n    }\n  }\n\n  onClose(callback) {\n    this.on(CHANNEL_EVENTS.close, callback);\n  }\n\n  onError(callback) {\n    this.on(CHANNEL_EVENTS.error, reason => callback(reason));\n  }\n\n  on(event, callback) {\n    this.bindings.push({\n      event,\n      callback\n    });\n  }\n\n  off(event) {\n    this.bindings = this.bindings.filter(bind => bind.event !== event);\n  }\n\n  canPush() {\n    return this.socket.isConnected() && this.isJoined();\n  }\n\n  push(event, payload) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n    }\n\n    let pushEvent = new Push(this, event, payload, timeout);\n\n    if (this.canPush()) {\n      pushEvent.send();\n    } else {\n      pushEvent.startTimeout();\n      this.pushBuffer.push(pushEvent);\n    }\n\n    return pushEvent;\n  }\n\n  updateJoinPayload(payload) {\n    this.joinPush.updatePayload(payload);\n  }\n  /**\n   * Leaves the channel\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n\n\n  unsubscribe() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n    this.state = CHANNEL_STATES.leaving;\n\n    let onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`);\n      this.trigger(CHANNEL_EVENTS.close, 'leave', this.joinRef());\n    }; // Destroy joinPush to avoid connection timeouts during unscription phase\n\n\n    this.joinPush.destroy();\n    let leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n    leavePush.receive('ok', () => onClose()).receive('timeout', () => onClose());\n    leavePush.send();\n\n    if (!this.canPush()) {\n      leavePush.trigger('ok', {});\n    }\n\n    return leavePush;\n  }\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   */\n\n\n  onMessage(event, payload, ref) {\n    return payload;\n  }\n\n  isMember(topic) {\n    return this.topic === topic;\n  }\n\n  joinRef() {\n    return this.joinPush.ref;\n  }\n\n  rejoin() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n\n    if (this.isLeaving()) {\n      return;\n    }\n\n    this.socket.leaveOpenTopic(this.topic);\n    this.state = CHANNEL_STATES.joining;\n    this.joinPush.resend(timeout);\n  }\n\n  trigger(event, payload, ref) {\n    let {\n      close,\n      error,\n      leave,\n      join\n    } = CHANNEL_EVENTS;\n    let events = [close, error, leave, join];\n\n    if (ref && events.indexOf(event) >= 0 && ref !== this.joinRef()) {\n      return;\n    }\n\n    let handledPayload = this.onMessage(event, payload, ref);\n\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n    }\n\n    this.bindings.filter(bind => {\n      // Bind all events if the user specifies a wildcard.\n      if (bind.event === '*') {\n        return event === (payload === null || payload === void 0 ? void 0 : payload.type);\n      } else {\n        return bind.event === event;\n      }\n    }).map(bind => bind.callback(handledPayload, ref));\n  }\n\n  replyEventName(ref) {\n    return `chan_reply_${ref}`;\n  }\n\n  isClosed() {\n    return this.state === CHANNEL_STATES.closed;\n  }\n\n  isErrored() {\n    return this.state === CHANNEL_STATES.errored;\n  }\n\n  isJoined() {\n    return this.state === CHANNEL_STATES.joined;\n  }\n\n  isJoining() {\n    return this.state === CHANNEL_STATES.joining;\n  }\n\n  isLeaving() {\n    return this.state === CHANNEL_STATES.leaving;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["CHANNEL_EVENTS","CHANNEL_STATES","Push","Timer","RealtimeSubscription","constructor","topic","params","socket","closed","timeout","joinPush","join","rejoinTimer","rejoinUntilConnected","reconnectAfterMs","receive","state","joined","reset","pushBuffer","forEach","pushEvent","send","onClose","log","joinRef","remove","onError","reason","isLeaving","isClosed","errored","scheduleTimeout","isJoining","on","reply","payload","ref","trigger","replyEventName","isConnected","rejoin","subscribe","joinedOnce","callback","close","error","event","bindings","push","off","filter","bind","canPush","isJoined","startTimeout","updateJoinPayload","updatePayload","unsubscribe","leaving","destroy","leavePush","leave","onMessage","isMember","leaveOpenTopic","joining","resend","events","indexOf","handledPayload","type","map","isErrored"],"sources":["/Users/mridha/Todo_in_React/todo/node_modules/@supabase/realtime-js/src/RealtimeSubscription.ts"],"sourcesContent":["import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants'\nimport Push from './lib/push'\nimport RealtimeClient from './RealtimeClient'\nimport Timer from './lib/timer'\n\nexport default class RealtimeSubscription {\n  bindings: any[] = []\n  timeout: number\n  state = CHANNEL_STATES.closed\n  joinedOnce = false\n  joinPush: Push\n  rejoinTimer: Timer\n  pushBuffer: Push[] = []\n\n  constructor(\n    public topic: string,\n    public params: { [key: string]: unknown } = {},\n    public socket: RealtimeClient\n  ) {\n    this.timeout = this.socket.timeout\n    this.joinPush = new Push(\n      this,\n      CHANNEL_EVENTS.join,\n      this.params,\n      this.timeout\n    )\n    this.rejoinTimer = new Timer(\n      () => this.rejoinUntilConnected(),\n      this.socket.reconnectAfterMs\n    )\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined\n      this.rejoinTimer.reset()\n      this.pushBuffer.forEach((pushEvent: Push) => pushEvent.send())\n      this.pushBuffer = []\n    })\n    this.onClose(() => {\n      this.rejoinTimer.reset()\n      this.socket.log('channel', `close ${this.topic} ${this.joinRef()}`)\n      this.state = CHANNEL_STATES.closed\n      this.socket.remove(this)\n    })\n    this.onError((reason: string) => {\n      if (this.isLeaving() || this.isClosed()) {\n        return\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.joinPush.receive('timeout', () => {\n      if (!this.isJoining()) {\n        return\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.on(CHANNEL_EVENTS.reply, (payload: any, ref: string) => {\n      this.trigger(this.replyEventName(ref), payload)\n    })\n  }\n\n  rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout()\n    if (this.socket.isConnected()) {\n      this.rejoin()\n    }\n  }\n\n  subscribe(timeout = this.timeout) {\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`\n    } else {\n      this.joinedOnce = true\n      this.rejoin(timeout)\n      return this.joinPush\n    }\n  }\n\n  onClose(callback: Function) {\n    this.on(CHANNEL_EVENTS.close, callback)\n  }\n\n  onError(callback: Function) {\n    this.on(CHANNEL_EVENTS.error, (reason: string) => callback(reason))\n  }\n\n  on(event: string, callback: Function) {\n    this.bindings.push({ event, callback })\n  }\n\n  off(event: string) {\n    this.bindings = this.bindings.filter((bind) => bind.event !== event)\n  }\n\n  canPush() {\n    return this.socket.isConnected() && this.isJoined()\n  }\n\n  push(event: CHANNEL_EVENTS, payload: any, timeout = this.timeout) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`\n    }\n    let pushEvent = new Push(this, event, payload, timeout)\n    if (this.canPush()) {\n      pushEvent.send()\n    } else {\n      pushEvent.startTimeout()\n      this.pushBuffer.push(pushEvent)\n    }\n\n    return pushEvent\n  }\n\n  updateJoinPayload(payload: { [key: string]: unknown }): void {\n    this.joinPush.updatePayload(payload)\n  }\n\n  /**\n   * Leaves the channel\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n  unsubscribe(timeout = this.timeout) {\n    this.state = CHANNEL_STATES.leaving\n    let onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`)\n      this.trigger(CHANNEL_EVENTS.close, 'leave', this.joinRef())\n    }\n    // Destroy joinPush to avoid connection timeouts during unscription phase\n    this.joinPush.destroy()\n\n    let leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout)\n    leavePush.receive('ok', () => onClose()).receive('timeout', () => onClose())\n    leavePush.send()\n    if (!this.canPush()) {\n      leavePush.trigger('ok', {})\n    }\n\n    return leavePush\n  }\n\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   */\n  onMessage(event: string, payload: any, ref?: string) {\n    return payload\n  }\n\n  isMember(topic: string) {\n    return this.topic === topic\n  }\n\n  joinRef() {\n    return this.joinPush.ref\n  }\n\n  rejoin(timeout = this.timeout) {\n    if (this.isLeaving()) {\n      return\n    }\n    this.socket.leaveOpenTopic(this.topic)\n    this.state = CHANNEL_STATES.joining\n    this.joinPush.resend(timeout)\n  }\n\n  trigger(event: string, payload?: any, ref?: string) {\n    let { close, error, leave, join } = CHANNEL_EVENTS\n    let events: string[] = [close, error, leave, join]\n    if (ref && events.indexOf(event) >= 0 && ref !== this.joinRef()) {\n      return\n    }\n    let handledPayload = this.onMessage(event, payload, ref)\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified'\n    }\n\n    this.bindings\n      .filter((bind) => {\n        // Bind all events if the user specifies a wildcard.\n        if (bind.event === '*') {\n          return event === payload?.type\n        } else {\n          return bind.event === event\n        }\n      })\n      .map((bind) => bind.callback(handledPayload, ref))\n  }\n\n  replyEventName(ref: string) {\n    return `chan_reply_${ref}`\n  }\n\n  isClosed() {\n    return this.state === CHANNEL_STATES.closed\n  }\n  isErrored() {\n    return this.state === CHANNEL_STATES.errored\n  }\n  isJoined() {\n    return this.state === CHANNEL_STATES.joined\n  }\n  isJoining() {\n    return this.state === CHANNEL_STATES.joining\n  }\n  isLeaving() {\n    return this.state === CHANNEL_STATES.leaving\n  }\n}\n"]},"metadata":{},"sourceType":"module"}