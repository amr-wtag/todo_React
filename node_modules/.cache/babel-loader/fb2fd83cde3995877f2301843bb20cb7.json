{"ast":null,"code":"import { PostgrestQueryBuilder } from '@supabase/postgrest-js';\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient';\nexport class SupabaseQueryBuilder extends PostgrestQueryBuilder {\n  constructor(url, _ref) {\n    let {\n      headers = {},\n      schema,\n      realtime,\n      table,\n      fetch,\n      shouldThrowOnError\n    } = _ref;\n    super(url, {\n      headers,\n      schema,\n      fetch,\n      shouldThrowOnError\n    });\n    this._subscription = null;\n    this._realtime = realtime;\n    this._headers = headers;\n    this._schema = schema;\n    this._table = table;\n  }\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n\n\n  on(event, callback) {\n    if (!this._realtime.isConnected()) {\n      this._realtime.connect();\n    }\n\n    if (!this._subscription) {\n      this._subscription = new SupabaseRealtimeClient(this._realtime, this._headers, this._schema, this._table);\n    }\n\n    return this._subscription.on(event, callback);\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,qBAAT,QAAsC,wBAAtC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAIA,OAAM,MAAOC,oBAAP,SAAuCF,qBAAvC,CAA+D;AAOnEG,cACEC,GADF,QAgBG;AAAA,QAdD;AACEC,aAAO,GAAG,EADZ;AAEEC,YAFF;AAGEC,cAHF;AAIEC,WAJF;AAKEC,WALF;AAMEC;AANF,KAcC;AAED,UAAMN,GAAN,EAAW;AAAEC,aAAF;AAAWC,YAAX;AAAmBG,WAAnB;AAA0BC;AAA1B,KAAX;AAxBM,yBAA+C,IAA/C;AA0BN,SAAKC,SAAL,GAAiBJ,QAAjB;AACA,SAAKK,QAAL,GAAgBP,OAAhB;AACA,SAAKQ,OAAL,GAAeP,MAAf;AACA,SAAKQ,MAAL,GAAcN,KAAd;AACD;AAED;;;;;;;AAKAO,IAAE,CACAC,KADA,EAEAC,QAFA,EAEuD;AAEvD,QAAI,CAAC,KAAKN,SAAL,CAAeO,WAAf,EAAL,EAAmC;AACjC,WAAKP,SAAL,CAAeQ,OAAf;AACD;;AACD,QAAI,CAAC,KAAKC,aAAV,EAAyB;AACvB,WAAKA,aAAL,GAAqB,IAAInB,sBAAJ,CACnB,KAAKU,SADc,EAEnB,KAAKC,QAFc,EAGnB,KAAKC,OAHc,EAInB,KAAKC,MAJc,CAArB;AAMD;;AACD,WAAO,KAAKM,aAAL,CAAmBL,EAAnB,CAAsBC,KAAtB,EAA6BC,QAA7B,CAAP;AACD;;AAtDkE","names":["PostgrestQueryBuilder","SupabaseRealtimeClient","SupabaseQueryBuilder","constructor","url","headers","schema","realtime","table","fetch","shouldThrowOnError","_realtime","_headers","_schema","_table","on","event","callback","isConnected","connect","_subscription"],"sources":["/Users/mridha/Todo_in_React/todo/node_modules/@supabase/supabase-js/src/lib/SupabaseQueryBuilder.ts"],"sourcesContent":["import { PostgrestQueryBuilder } from '@supabase/postgrest-js'\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient'\nimport { RealtimeClient } from '@supabase/realtime-js'\nimport { Fetch, GenericObject, SupabaseEventTypes, SupabaseRealtimePayload } from './types'\n\nexport class SupabaseQueryBuilder<T> extends PostgrestQueryBuilder<T> {\n  private _subscription: SupabaseRealtimeClient | null = null\n  private _realtime: RealtimeClient\n  private _headers: GenericObject\n  private _schema: string\n  private _table: string\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      realtime,\n      table,\n      fetch,\n      shouldThrowOnError,\n    }: {\n      headers?: GenericObject\n      schema: string\n      realtime: RealtimeClient\n      table: string\n      fetch?: Fetch\n      shouldThrowOnError?: boolean\n    }\n  ) {\n    super(url, { headers, schema, fetch, shouldThrowOnError })\n\n    this._realtime = realtime\n    this._headers = headers\n    this._schema = schema\n    this._table = table\n  }\n\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n  on(\n    event: SupabaseEventTypes,\n    callback: (payload: SupabaseRealtimePayload<T>) => void\n  ): SupabaseRealtimeClient {\n    if (!this._realtime.isConnected()) {\n      this._realtime.connect()\n    }\n    if (!this._subscription) {\n      this._subscription = new SupabaseRealtimeClient(\n        this._realtime,\n        this._headers,\n        this._schema,\n        this._table\n      )\n    }\n    return this._subscription.on(event, callback)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}