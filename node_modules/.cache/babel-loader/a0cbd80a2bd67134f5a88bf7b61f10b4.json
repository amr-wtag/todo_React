{"ast":null,"code":"import { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestRpcBuilder extends PostgrestBuilder {\n  constructor(url) {\n    let {\n      headers = {},\n      schema,\n      fetch,\n      shouldThrowOnError\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super({\n      fetch,\n      shouldThrowOnError\n    });\n    this.url = new URL(url);\n    this.headers = Object.assign({}, headers);\n    this.schema = schema;\n  }\n  /**\n   * Perform a function call.\n   */\n\n\n  rpc(params) {\n    let {\n      head = false,\n      count = null\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (head) {\n      this.method = 'HEAD';\n\n      if (params) {\n        Object.entries(params).forEach(_ref => {\n          let [name, value] = _ref;\n          this.url.searchParams.append(name, value);\n        });\n      }\n    } else {\n      this.method = 'POST';\n      this.body = params;\n    }\n\n    if (count) {\n      if (this.headers['Prefer'] !== undefined) this.headers['Prefer'] += `,count=${count}`;else this.headers['Prefer'] = `count=${count}`;\n    }\n\n    return new PostgrestFilterBuilder(this);\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAAgBA,gBAAhB,QAAwC,SAAxC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AAEA,eAAc,MAAOC,mBAAP,SAAsCF,gBAAtC,CAAyD;AACrEG,cACEC,GADF,EAYQ;AAAA,QAVN;AACEC,aAAO,GAAG,EADZ;AAEEC,YAFF;AAGEC,WAHF;AAIEC;AAJF,KAUM,uEAAF,EAAE;AAEN,UAAO;AAAED,WAAF;AAASC;AAAT,KAAP;AACA,SAAKJ,GAAL,GAAW,IAAIK,GAAJ,CAAQL,GAAR,CAAX;AACA,SAAKC,OAAL,GAAYK,kBAAQL,OAAR,CAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;AAED;;;;;AAGAK,KAAG,CACDC,MADC,EAQK;AAAA,QANN;AACEC,UAAI,GAAG,KADT;AAEEC,WAAK,GAAG;AAFV,KAMM,uEAAF,EAAE;;AAEN,QAAID,IAAJ,EAAU;AACR,WAAKE,MAAL,GAAc,MAAd;;AAEA,UAAIH,MAAJ,EAAY;AACVF,cAAM,CAACM,OAAP,CAAeJ,MAAf,EAAuBK,OAAvB,CAA+B,QAAkB;AAAA,cAAjB,CAACC,IAAD,EAAOC,KAAP,CAAiB;AAC/C,eAAKf,GAAL,CAASgB,YAAT,CAAsBC,MAAtB,CAA6BH,IAA7B,EAAmCC,KAAnC;AACD,SAFD;AAGD;AACF,KARD,MAQO;AACL,WAAKJ,MAAL,GAAc,MAAd;AACA,WAAKO,IAAL,GAAYV,MAAZ;AACD;;AAED,QAAIE,KAAJ,EAAW;AACT,UAAI,KAAKT,OAAL,CAAa,QAAb,MAA2BkB,SAA/B,EAA0C,KAAKlB,OAAL,CAAa,QAAb,KAA0B,UAAUS,KAAK,EAAzC,CAA1C,KACK,KAAKT,OAAL,CAAa,QAAb,IAAyB,SAASS,KAAK,EAAvC;AACN;;AAED,WAAO,IAAIb,sBAAJ,CAA2B,IAA3B,CAAP;AACD;;AArDoE","names":["PostgrestBuilder","PostgrestFilterBuilder","PostgrestRpcBuilder","constructor","url","headers","schema","fetch","shouldThrowOnError","URL","Object","rpc","params","head","count","method","entries","forEach","name","value","searchParams","append","body","undefined"],"sources":["/Users/mridha/Todo_in_React/todo/node_modules/@supabase/postgrest-js/src/lib/PostgrestRpcBuilder.ts"],"sourcesContent":["import { Fetch, PostgrestBuilder } from './types'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\n\nexport default class PostgrestRpcBuilder<T> extends PostgrestBuilder<T> {\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n      shouldThrowOnError,\n    }: {\n      headers?: { [key: string]: string }\n      schema?: string\n      fetch?: Fetch\n      shouldThrowOnError?: boolean\n    } = {}\n  ) {\n    super(({ fetch, shouldThrowOnError } as unknown) as PostgrestBuilder<T>)\n    this.url = new URL(url)\n    this.headers = { ...headers }\n    this.schema = schema\n  }\n\n  /**\n   * Perform a function call.\n   */\n  rpc(\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    if (head) {\n      this.method = 'HEAD'\n\n      if (params) {\n        Object.entries(params).forEach(([name, value]) => {\n          this.url.searchParams.append(name, value)\n        })\n      }\n    } else {\n      this.method = 'POST'\n      this.body = params\n    }\n\n    if (count) {\n      if (this.headers['Prefer'] !== undefined) this.headers['Prefer'] += `,count=${count}`\n      else this.headers['Prefer'] = `count=${count}`\n    }\n\n    return new PostgrestFilterBuilder(this)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}