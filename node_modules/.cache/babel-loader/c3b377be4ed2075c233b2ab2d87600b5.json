{"ast":null,"code":"// /* eslint-disable react-hooks/rules-of-hooks */\n// import React, { useState, useContext } from \"react\";\n// import Todo from \"../Todo/Todo\";\n// import { TextArea } from \"../TextArea/TextArea\";\n// import { Icon } from \"../Icon/Icon\";\n// import { Button } from \"../Button/Button\";\n// import { v4 as uuidv4 } from \"uuid\";\n// import { supabase } from \"../../config/apiClient\";\n// // import { AppContext } from \"../../App\";\n// const todos = () => {\n//   const {\n//     todos,\n//     flagHandler,\n//     flag,\n//     toasts,\n//     dataCount,\n//     setToasts,\n//     setDataCount,\n//     setShowEmpty,\n//     handleRemoveTodo,\n//     removeCompleteFromIncomplete,\n//   } = useContext(AppContext);\n//   /*  const handleRemoveTodo = useContext(AppContext);\n//   const removeCompleteFromIncomplete = useContext(AppContext); */\n//   // const flagHandler = useContext(AppContext);\n//   // const flag = useContext(AppContext);\n//   // const toasts = useContext(AppContext);\n//   // const dataCount = useContext(AppContext);\n//   // const setToasts = useContext(AppContext);\n//   // const setDataCount = useContext(AppContext);\n//   // const setShowEmpty = useContext(AppContext);\n//   const [top, setTop] = useState(12);\n//   const [showSpinner, setShowSpinner] = useState(false);\n//   const [taskvalue, setTaskvalue] = useState(\"\");\n//   const [showFullSpinner, setShowFullSpinner] = useState(false);\n//   const [show, setShow] = useState(false);\n//   // addhandler\n//   //add task value\n//   const task = (e) => {\n//     setTaskvalue(e);\n//   };\n//   const toggleHandler = (e) => {\n//     e.preventDefault();\n//     setShow(!show);\n//     setShowEmpty(show);\n//   };\n//   const addhandler = async (e) => {\n//     if (taskvalue.length < 3) {\n//       let newToast = {\n//         id: uuidv4(),\n//         type: \"error\",\n//         message: \"Task must be more then 3 character\",\n//       };\n//       setToasts([...toasts, newToast]);\n//     } else {\n//       setShowSpinner(true);\n//       const { data, error } = await supabase\n//         .from(\"ReactTodo\")\n//         .insert([{ name: taskvalue, created_at: new Date(Date.now()) }]);\n//       if (error === null) {\n//         setShow(!show);\n//         if (flag !== \"complete\") todos.unshift(data[0]);\n//         setDataCount(dataCount + 1);\n//       }\n//       setTaskvalue(\"\");\n//       setShowSpinner(false);\n//       let newToast = {\n//         id: uuidv4(),\n//         type: error ? \"error\" : \"success\",\n//         message: error ? \"error\" : \"New Task added\",\n//       };\n//       setToasts([...toasts, newToast]);\n//     }\n//   };\n//   const moreValue = (e) => {\n//     setShowFullSpinner(true);\n//     setTimeout(() => {\n//       setTop(top + 12);\n//       setShowFullSpinner(false);\n//     }, 300);\n//   };\n//   const showless = (e) => {\n//     setTop(12);\n//   };\n//   return (\n//     <div>\n//       <div className={`${showFullSpinner && \"blur\"}`}>\n//         <div className=\"addTask\">\n//           <h1 className=\"addTaskH1\">Add Tasks</h1>\n//         </div>\n//         <div className=\"headerClass\">\n//           <Button className=\"create btn\" onClick={toggleHandler}>\n//             <Icon src=\"Plus\" />\n//             Create\n//           </Button>\n//           <div className={`topButtonAll `}>\n//             <Button\n//               className={`topButton ${\n//                 (dataCount === 0 || flag === \"all\") && \"blurButton\"\n//               }`}\n//               disabled={dataCount === 0}\n//               onClick={(e) => {\n//                 flagHandler(\"all\");\n//               }}\n//             >\n//               All\n//             </Button>\n//             <Button\n//               className={`topButton ${\n//                 (dataCount === 0 || flag === \"incomplete\") && \"blurButton\"\n//               }`}\n//               disabled={dataCount === 0}\n//               onClick={(e) => {\n//                 flagHandler(\"incomplete\");\n//               }}\n//             >\n//               Incomplete\n//             </Button>\n//             <Button\n//               className={`topButton  ${\n//                 (dataCount === 0 || flag === \"complete\") && \"blurButton\"\n//               } `}\n//               disabled={dataCount === 0}\n//               onClick={(e) => {\n//                 flagHandler(\"complete\");\n//               }}\n//             >\n//               Complete\n//             </Button>\n//           </div>\n//         </div>\n//         <div className=\"todos\">\n//           {show && (\n//             <div id=\"todo\" className=\"todo\">\n//               <div>\n//                 <TextArea\n//                   className={`editName ${showSpinner && \"blur\"}`}\n//                   placeholder=\"Add new task\"\n//                   autoFocus\n//                   onChange={(e) => task(e.target.value)}\n//                   readOnly={showSpinner}\n//                   onKeyPress={(e) => {\n//                     if (e.key === \"Enter\") {\n//                       e.preventDefault();\n//                       addhandler(e);\n//                     }\n//                   }}\n//                   onFocus={function (e) {\n//                     var val = e.target.value;\n//                     e.target.value = \"\";\n//                     e.target.value = val;\n//                   }}\n//                 />\n//               </div>\n//               <div className=\"addDel\">\n//                 <Button\n//                   className={`saveButton ${showSpinner && \"blur\"}`}\n//                   onClick={addhandler}\n//                 >\n//                   Add Task\n//                 </Button>\n//                 <Button className=\"boxedButton\" onClick={toggleHandler}>\n//                   <Icon src=\"Delete\" />\n//                 </Button>\n//               </div>\n//               {showSpinner && (\n//                 <div>\n//                   <Icon className=\"spinning rotateDiv\" src=\"Spin\" />\n//                 </div>\n//               )}\n//             </div>\n//           )}\n//           {todos.slice(0, top).map((todo) => (\n//             <Todo\n//               todo={todo}\n//               key={todo.id}\n//               toasts={toasts}\n//               setToasts={setToasts}\n//               handleRemoveTodo={handleRemoveTodo}\n//               dataCount={dataCount}\n//               setDataCount={setDataCount}\n//               flag={flag}\n//               removeCompleteFromIncomplete={removeCompleteFromIncomplete}\n//             />\n//           ))}\n//         </div>\n//         {!showFullSpinner && (\n//           <div className=\"bottomButton\">\n//             {todos.length <= 12 ? null : top <= todos.length ? (\n//               <div className=\"loadmoreOver\">\n//                 <Button className=\"loadMoreBtnContainer\" onClick={moreValue}>\n//                   Load More\n//                 </Button>\n//               </div>\n//             ) : (\n//               <div className=\"loadmoreOver\">\n//                 <Button className=\"loadMoreBtnContainer\" onClick={showless}>\n//                   Show Less\n//                 </Button>\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n//       <div>\n//         {showFullSpinner && <Icon className=\"spinning rotateFull\" src=\"Spin\" />}\n//       </div>\n//     </div>\n//   );\n// };\n// export default todos;","map":{"version":3,"sources":["/Users/mridha/Todo_in_React/todo/src/components/Todos/Todos.jsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// /* eslint-disable react-hooks/rules-of-hooks */\n// import React, { useState, useContext } from \"react\";\n// import Todo from \"../Todo/Todo\";\n// import { TextArea } from \"../TextArea/TextArea\";\n// import { Icon } from \"../Icon/Icon\";\n// import { Button } from \"../Button/Button\";\n// import { v4 as uuidv4 } from \"uuid\";\n// import { supabase } from \"../../config/apiClient\";\n// // import { AppContext } from \"../../App\";\n// const todos = () => {\n//   const {\n//     todos,\n//     flagHandler,\n//     flag,\n//     toasts,\n//     dataCount,\n//     setToasts,\n//     setDataCount,\n//     setShowEmpty,\n//     handleRemoveTodo,\n//     removeCompleteFromIncomplete,\n//   } = useContext(AppContext);\n//   /*  const handleRemoveTodo = useContext(AppContext);\n//   const removeCompleteFromIncomplete = useContext(AppContext); */\n//   // const flagHandler = useContext(AppContext);\n//   // const flag = useContext(AppContext);\n//   // const toasts = useContext(AppContext);\n//   // const dataCount = useContext(AppContext);\n//   // const setToasts = useContext(AppContext);\n//   // const setDataCount = useContext(AppContext);\n//   // const setShowEmpty = useContext(AppContext);\n\n//   const [top, setTop] = useState(12);\n//   const [showSpinner, setShowSpinner] = useState(false);\n//   const [taskvalue, setTaskvalue] = useState(\"\");\n//   const [showFullSpinner, setShowFullSpinner] = useState(false);\n//   const [show, setShow] = useState(false);\n//   // addhandler\n//   //add task value\n//   const task = (e) => {\n//     setTaskvalue(e);\n//   };\n//   const toggleHandler = (e) => {\n//     e.preventDefault();\n//     setShow(!show);\n//     setShowEmpty(show);\n//   };\n//   const addhandler = async (e) => {\n//     if (taskvalue.length < 3) {\n//       let newToast = {\n//         id: uuidv4(),\n//         type: \"error\",\n//         message: \"Task must be more then 3 character\",\n//       };\n//       setToasts([...toasts, newToast]);\n//     } else {\n//       setShowSpinner(true);\n//       const { data, error } = await supabase\n//         .from(\"ReactTodo\")\n//         .insert([{ name: taskvalue, created_at: new Date(Date.now()) }]);\n//       if (error === null) {\n//         setShow(!show);\n//         if (flag !== \"complete\") todos.unshift(data[0]);\n//         setDataCount(dataCount + 1);\n//       }\n//       setTaskvalue(\"\");\n//       setShowSpinner(false);\n//       let newToast = {\n//         id: uuidv4(),\n//         type: error ? \"error\" : \"success\",\n//         message: error ? \"error\" : \"New Task added\",\n//       };\n//       setToasts([...toasts, newToast]);\n//     }\n//   };\n//   const moreValue = (e) => {\n//     setShowFullSpinner(true);\n//     setTimeout(() => {\n//       setTop(top + 12);\n\n//       setShowFullSpinner(false);\n//     }, 300);\n//   };\n//   const showless = (e) => {\n//     setTop(12);\n//   };\n//   return (\n//     <div>\n//       <div className={`${showFullSpinner && \"blur\"}`}>\n//         <div className=\"addTask\">\n//           <h1 className=\"addTaskH1\">Add Tasks</h1>\n//         </div>\n\n//         <div className=\"headerClass\">\n//           <Button className=\"create btn\" onClick={toggleHandler}>\n//             <Icon src=\"Plus\" />\n//             Create\n//           </Button>\n//           <div className={`topButtonAll `}>\n//             <Button\n//               className={`topButton ${\n//                 (dataCount === 0 || flag === \"all\") && \"blurButton\"\n//               }`}\n//               disabled={dataCount === 0}\n//               onClick={(e) => {\n//                 flagHandler(\"all\");\n//               }}\n//             >\n//               All\n//             </Button>\n//             <Button\n//               className={`topButton ${\n//                 (dataCount === 0 || flag === \"incomplete\") && \"blurButton\"\n//               }`}\n//               disabled={dataCount === 0}\n//               onClick={(e) => {\n//                 flagHandler(\"incomplete\");\n//               }}\n//             >\n//               Incomplete\n//             </Button>\n//             <Button\n//               className={`topButton  ${\n//                 (dataCount === 0 || flag === \"complete\") && \"blurButton\"\n//               } `}\n//               disabled={dataCount === 0}\n//               onClick={(e) => {\n//                 flagHandler(\"complete\");\n//               }}\n//             >\n//               Complete\n//             </Button>\n//           </div>\n//         </div>\n//         <div className=\"todos\">\n//           {show && (\n//             <div id=\"todo\" className=\"todo\">\n//               <div>\n//                 <TextArea\n//                   className={`editName ${showSpinner && \"blur\"}`}\n//                   placeholder=\"Add new task\"\n//                   autoFocus\n//                   onChange={(e) => task(e.target.value)}\n//                   readOnly={showSpinner}\n//                   onKeyPress={(e) => {\n//                     if (e.key === \"Enter\") {\n//                       e.preventDefault();\n//                       addhandler(e);\n//                     }\n//                   }}\n//                   onFocus={function (e) {\n//                     var val = e.target.value;\n//                     e.target.value = \"\";\n//                     e.target.value = val;\n//                   }}\n//                 />\n//               </div>\n//               <div className=\"addDel\">\n//                 <Button\n//                   className={`saveButton ${showSpinner && \"blur\"}`}\n//                   onClick={addhandler}\n//                 >\n//                   Add Task\n//                 </Button>\n//                 <Button className=\"boxedButton\" onClick={toggleHandler}>\n//                   <Icon src=\"Delete\" />\n//                 </Button>\n//               </div>\n\n//               {showSpinner && (\n//                 <div>\n//                   <Icon className=\"spinning rotateDiv\" src=\"Spin\" />\n//                 </div>\n//               )}\n//             </div>\n//           )}\n//           {todos.slice(0, top).map((todo) => (\n//             <Todo\n//               todo={todo}\n//               key={todo.id}\n//               toasts={toasts}\n//               setToasts={setToasts}\n//               handleRemoveTodo={handleRemoveTodo}\n//               dataCount={dataCount}\n//               setDataCount={setDataCount}\n//               flag={flag}\n//               removeCompleteFromIncomplete={removeCompleteFromIncomplete}\n//             />\n//           ))}\n//         </div>\n\n//         {!showFullSpinner && (\n//           <div className=\"bottomButton\">\n//             {todos.length <= 12 ? null : top <= todos.length ? (\n//               <div className=\"loadmoreOver\">\n//                 <Button className=\"loadMoreBtnContainer\" onClick={moreValue}>\n//                   Load More\n//                 </Button>\n//               </div>\n//             ) : (\n//               <div className=\"loadmoreOver\">\n//                 <Button className=\"loadMoreBtnContainer\" onClick={showless}>\n//                   Show Less\n//                 </Button>\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n//       <div>\n//         {showFullSpinner && <Icon className=\"spinning rotateFull\" src=\"Spin\" />}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default todos;\n"]},"metadata":{},"sourceType":"module"}