{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nconst _getErrorMessage = err => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\n\nconst handleError = (error, reject) => {\n  if (typeof error.json !== 'function') {\n    return reject(error);\n  }\n\n  error.json().then(err => {\n    return reject({\n      message: _getErrorMessage(err),\n      status: (error === null || error === void 0 ? void 0 : error.status) || 500\n    });\n  });\n};\n\nconst _getRequestParams = (method, options, body) => {\n  const params = {\n    method,\n    headers: (options === null || options === void 0 ? void 0 : options.headers) || {}\n  };\n\n  if (method === 'GET') {\n    return params;\n  }\n\n  params.headers = Object.assign({\n    'Content-Type': 'text/plain;charset=UTF-8'\n  }, options === null || options === void 0 ? void 0 : options.headers);\n  params.body = JSON.stringify(body);\n  return params;\n};\n\nfunction _handleRequest(fetcher, method, url, options, body) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => {\n      fetcher(url, _getRequestParams(method, options, body)).then(result => {\n        if (!result.ok) throw result;\n        if (options === null || options === void 0 ? void 0 : options.noResolveJson) return resolve;\n        return result.json();\n      }).then(data => resolve(data)).catch(error => handleError(error, reject));\n    });\n  });\n}\n\nexport function get(fetcher, url, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'GET', url, options);\n  });\n}\nexport function post(fetcher, url, body, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'POST', url, options, body);\n  });\n}\nexport function put(fetcher, url, body, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'PUT', url, options, body);\n  });\n}\nexport function remove(fetcher, url, body, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'DELETE', url, options, body);\n  });\n}","map":{"version":3,"mappings":"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","names":["_getErrorMessage","err","msg","message","error_description","error","JSON","stringify","handleError","reject","json","then","status","_getRequestParams","method","options","body","params","headers","Object","_handleRequest","fetcher","url","Promise","resolve","result","ok","noResolveJson","data","catch","get","post","put","remove"],"sources":["/Users/mridha/Todo_in_React/todo/node_modules/@supabase/gotrue-js/src/lib/fetch.ts"],"sourcesContent":["export type Fetch = typeof fetch\n\nexport interface FetchOptions {\n  headers?: {\n    [key: string]: string\n  }\n  noResolveJson?: boolean\n}\n\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'\n\nconst _getErrorMessage = (err: any): string =>\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\n\nconst handleError = (error: any, reject: any) => {\n  if (typeof error.json !== 'function') {\n    return reject(error)\n  }\n  error.json().then((err: any) => {\n    return reject({\n      message: _getErrorMessage(err),\n      status: error?.status || 500,\n    })\n  })\n}\n\nconst _getRequestParams = (method: RequestMethodType, options?: FetchOptions, body?: object) => {\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\n\n  if (method === 'GET') {\n    return params\n  }\n\n  params.headers = { 'Content-Type': 'text/plain;charset=UTF-8', ...options?.headers }\n  params.body = JSON.stringify(body)\n\n  return params\n}\n\nasync function _handleRequest(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: FetchOptions,\n  body?: object\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    fetcher(url, _getRequestParams(method, options, body))\n      .then((result) => {\n        if (!result.ok) throw result\n        if (options?.noResolveJson) return resolve\n        return result.json()\n      })\n      .then((data) => resolve(data))\n      .catch((error) => handleError(error, reject))\n  })\n}\n\nexport async function get(fetcher: Fetch, url: string, options?: FetchOptions): Promise<any> {\n  return _handleRequest(fetcher, 'GET', url, options)\n}\n\nexport async function post(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions\n): Promise<any> {\n  return _handleRequest(fetcher, 'POST', url, options, body)\n}\n\nexport async function put(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions\n): Promise<any> {\n  return _handleRequest(fetcher, 'PUT', url, options, body)\n}\n\nexport async function remove(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions\n): Promise<any> {\n  return _handleRequest(fetcher, 'DELETE', url, options, body)\n}\n"]},"metadata":{},"sourceType":"module"}