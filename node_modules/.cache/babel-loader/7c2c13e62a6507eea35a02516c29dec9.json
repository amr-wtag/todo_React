{"ast":null,"code":"import { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestQueryBuilder extends PostgrestBuilder {\n  constructor(url) {\n    let {\n      headers = {},\n      schema,\n      fetch,\n      shouldThrowOnError\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super({\n      fetch,\n      shouldThrowOnError\n    });\n    this.url = new URL(url);\n    this.headers = Object.assign({}, headers);\n    this.schema = schema;\n  }\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   * @param head  When set to true, select will void data.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  select() {\n    let columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';\n    let {\n      head = false,\n      count = null\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.method = 'GET'; // Remove whitespaces except when quoted\n\n    let quoted = false;\n    const cleanedColumns = columns.split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`;\n    }\n\n    if (head) {\n      this.method = 'HEAD';\n    }\n\n    return new PostgrestFilterBuilder(this);\n  }\n\n  insert(values) {\n    let {\n      upsert = false,\n      onConflict,\n      returning = 'representation',\n      count = null\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.method = 'POST';\n    const prefersHeaders = [`return=${returning}`];\n    if (upsert) prefersHeaders.push('resolution=merge-duplicates');\n    if (upsert && onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n    this.body = values;\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n        this.url.searchParams.set('columns', uniqueColumns.join(','));\n      }\n    }\n\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs an UPSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n   */\n\n\n  upsert(values) {\n    let {\n      onConflict,\n      returning = 'representation',\n      count = null,\n      ignoreDuplicates = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.method = 'POST';\n    const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`, `return=${returning}`];\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n    this.body = values;\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs an UPDATE on the table.\n   *\n   * @param values  The values to update.\n   * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  update(values) {\n    let {\n      returning = 'representation',\n      count = null\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.method = 'PATCH';\n    const prefersHeaders = [`return=${returning}`];\n    this.body = values;\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs a DELETE on the table.\n   *\n   * @param returning  If `true`, return the deleted row(s) in the response.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  delete() {\n    let {\n      returning = 'representation',\n      count = null\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.method = 'DELETE';\n    const prefersHeaders = [`return=${returning}`];\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["PostgrestBuilder","PostgrestFilterBuilder","PostgrestQueryBuilder","constructor","url","headers","schema","fetch","shouldThrowOnError","URL","Object","select","columns","head","count","method","quoted","cleanedColumns","split","map","c","test","join","searchParams","set","insert","values","upsert","onConflict","returning","prefersHeaders","push","undefined","body","unshift","Array","isArray","reduce","acc","x","concat","keys","length","uniqueColumns","Set","column","ignoreDuplicates","update","delete"],"sources":["/Users/mridha/Todo_in_React/todo/node_modules/@supabase/postgrest-js/src/lib/PostgrestQueryBuilder.ts"],"sourcesContent":["import { Fetch, PostgrestBuilder } from './types'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\n\nexport default class PostgrestQueryBuilder<T> extends PostgrestBuilder<T> {\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n      shouldThrowOnError,\n    }: {\n      headers?: { [key: string]: string }\n      schema?: string\n      fetch?: Fetch\n      shouldThrowOnError?: boolean\n    } = {}\n  ) {\n    super(({ fetch, shouldThrowOnError } as unknown) as PostgrestBuilder<T>)\n    this.url = new URL(url)\n    this.headers = { ...headers }\n    this.schema = schema\n  }\n\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   * @param head  When set to true, select will void data.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  select(\n    columns = '*',\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'GET'\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = columns\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`\n    }\n    if (head) {\n      this.method = 'HEAD'\n    }\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an INSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  insert(\n    values: Partial<T> | Partial<T>[],\n    options?: {\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<T>\n  /**\n   * @deprecated Use `upsert()` instead.\n   */\n  insert(\n    values: Partial<T> | Partial<T>[],\n    options?: {\n      upsert?: boolean\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<T>\n  insert(\n    values: Partial<T> | Partial<T>[],\n    {\n      upsert = false,\n      onConflict,\n      returning = 'representation',\n      count = null,\n    }: {\n      upsert?: boolean\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'POST'\n\n    const prefersHeaders = [`return=${returning}`]\n    if (upsert) prefersHeaders.push('resolution=merge-duplicates')\n\n    if (upsert && onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an UPSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n   */\n  upsert(\n    values: Partial<T> | Partial<T>[],\n    {\n      onConflict,\n      returning = 'representation',\n      count = null,\n      ignoreDuplicates = false,\n    }: {\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n      ignoreDuplicates?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'POST'\n\n    const prefersHeaders = [\n      `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`,\n      `return=${returning}`,\n    ]\n\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an UPDATE on the table.\n   *\n   * @param values  The values to update.\n   * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  update(\n    values: Partial<T>,\n    {\n      returning = 'representation',\n      count = null,\n    }: {\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'PATCH'\n    const prefersHeaders = [`return=${returning}`]\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs a DELETE on the table.\n   *\n   * @param returning  If `true`, return the deleted row(s) in the response.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  delete({\n    returning = 'representation',\n    count = null,\n  }: {\n    returning?: 'minimal' | 'representation'\n    count?: null | 'exact' | 'planned' | 'estimated'\n  } = {}): PostgrestFilterBuilder<T> {\n    this.method = 'DELETE'\n    const prefersHeaders = [`return=${returning}`]\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n    return new PostgrestFilterBuilder(this)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}