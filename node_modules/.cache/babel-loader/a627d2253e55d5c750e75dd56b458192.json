{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport GoTrueApi from './GoTrueApi';\nimport { isBrowser, getParameterByName, uuid } from './lib/helpers';\nimport { GOTRUE_URL, DEFAULT_HEADERS, STORAGE_KEY } from './lib/constants';\nimport { polyfillGlobalThis } from './lib/polyfills';\npolyfillGlobalThis(); // Make \"globalThis\" available\n\nconst DEFAULT_OPTIONS = {\n  url: GOTRUE_URL,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  multiTab: true,\n  headers: DEFAULT_HEADERS\n};\nexport default class GoTrueClient {\n  /**\n   * Create a new client for use in the browser.\n   * @param options.url The URL of the GoTrue server.\n   * @param options.headers Any additional headers to send to the GoTrue server.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.localStorage Provide your own local storage implementation to use instead of the browser's local storage.\n   * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n   * @param options.cookieOptions\n   * @param options.fetch A custom fetch implementation.\n   */\n  constructor(options) {\n    this.stateChangeEmitters = new Map();\n    const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    this.currentUser = null;\n    this.currentSession = null;\n    this.autoRefreshToken = settings.autoRefreshToken;\n    this.persistSession = settings.persistSession;\n    this.multiTab = settings.multiTab;\n    this.localStorage = settings.localStorage || globalThis.localStorage;\n    this.api = new GoTrueApi({\n      url: settings.url,\n      headers: settings.headers,\n      cookieOptions: settings.cookieOptions,\n      fetch: settings.fetch\n    });\n\n    this._recoverSession();\n\n    this._recoverAndRefresh();\n\n    this._listenForMultiTabEvents();\n\n    if (settings.detectSessionInUrl && isBrowser() && !!getParameterByName('access_token')) {\n      // Handle the OAuth redirect\n      this.getSessionFromUrl({\n        storeSession: true\n      }).then(_ref => {\n        let {\n          error\n        } = _ref;\n\n        if (error) {\n          console.error('Error getting session from URL.', error);\n        }\n      });\n    }\n  }\n  /**\n   * Creates a new user.\n   * @type UserCredentials\n   * @param email The user's email address.\n   * @param password The user's password.\n   * @param phone The user's phone number.\n   * @param redirectTo The redirect URL attached to the signup confirmation link. Does not redirect the user if it's a mobile signup.\n   * @param data Optional user metadata.\n   */\n\n\n  signUp(_ref2) {\n    let {\n      email,\n      password,\n      phone\n    } = _ref2;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this._removeSession();\n\n        const {\n          data,\n          error\n        } = phone && password ? yield this.api.signUpWithPhone(phone, password, {\n          data: options.data,\n          captchaToken: options.captchaToken\n        }) : yield this.api.signUpWithEmail(email, password, {\n          redirectTo: options.redirectTo,\n          data: options.data,\n          captchaToken: options.captchaToken\n        });\n\n        if (error) {\n          throw error;\n        }\n\n        if (!data) {\n          throw 'An error occurred on sign up.';\n        }\n\n        let session = null;\n        let user = null;\n\n        if (data.access_token) {\n          session = data;\n          user = session.user;\n\n          this._saveSession(session);\n\n          this._notifyAllSubscribers('SIGNED_IN');\n        }\n\n        if (data.id) {\n          user = data;\n        }\n\n        return {\n          user,\n          session,\n          error: null\n        };\n      } catch (e) {\n        return {\n          user: null,\n          session: null,\n          error: e\n        };\n      }\n    });\n  }\n  /**\n   * Log in an existing user, or login via a third-party provider.\n   * @type UserCredentials\n   * @param email The user's email address.\n   * @param phone The user's phone number.\n   * @param password The user's password.\n   * @param refreshToken A valid refresh token that was returned on login.\n   * @param provider One of the providers supported by GoTrue.\n   * @param redirectTo A URL to send the user to after they are confirmed (OAuth logins only).\n   * @param shouldCreateUser A boolean flag to indicate whether to automatically create a user on magiclink / otp sign-ins if the user doesn't exist. Defaults to true.\n   * @param scopes A space-separated list of scopes granted to the OAuth application.\n   */\n\n\n  signIn(_ref3) {\n    let {\n      email,\n      phone,\n      password,\n      refreshToken,\n      provider,\n      oidc\n    } = _ref3;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this._removeSession();\n\n        if (email && !password) {\n          const {\n            error\n          } = yield this.api.sendMagicLinkEmail(email, {\n            redirectTo: options.redirectTo,\n            shouldCreateUser: options.shouldCreateUser,\n            captchaToken: options.captchaToken\n          });\n          return {\n            user: null,\n            session: null,\n            error\n          };\n        }\n\n        if (email && password) {\n          return this._handleEmailSignIn(email, password, {\n            redirectTo: options.redirectTo\n          });\n        }\n\n        if (phone && !password) {\n          const {\n            error\n          } = yield this.api.sendMobileOTP(phone, {\n            shouldCreateUser: options.shouldCreateUser,\n            captchaToken: options.captchaToken\n          });\n          return {\n            user: null,\n            session: null,\n            error\n          };\n        }\n\n        if (phone && password) {\n          return this._handlePhoneSignIn(phone, password);\n        }\n\n        if (refreshToken) {\n          // currentSession and currentUser will be updated to latest on _callRefreshToken using the passed refreshToken\n          const {\n            error\n          } = yield this._callRefreshToken(refreshToken);\n          if (error) throw error;\n          return {\n            user: this.currentUser,\n            session: this.currentSession,\n            error: null\n          };\n        }\n\n        if (provider) {\n          return this._handleProviderSignIn(provider, {\n            redirectTo: options.redirectTo,\n            scopes: options.scopes\n          });\n        }\n\n        if (oidc) {\n          return this._handleOpenIDConnectSignIn(oidc);\n        }\n\n        throw new Error(`You must provide either an email, phone number, a third-party provider or OpenID Connect.`);\n      } catch (e) {\n        return {\n          user: null,\n          session: null,\n          error: e\n        };\n      }\n    });\n  }\n  /**\n   * Log in a user given a User supplied OTP received via mobile.\n   * @param email The user's email address.\n   * @param phone The user's phone number.\n   * @param token The user's password.\n   * @param type The user's verification type.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n\n\n  verifyOTP(params) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this._removeSession();\n\n        const {\n          data,\n          error\n        } = yield this.api.verifyOTP(params, options);\n\n        if (error) {\n          throw error;\n        }\n\n        if (!data) {\n          throw 'An error occurred on token verification.';\n        }\n\n        let session = null;\n        let user = null;\n\n        if (data.access_token) {\n          session = data;\n          user = session.user;\n\n          this._saveSession(session);\n\n          this._notifyAllSubscribers('SIGNED_IN');\n        }\n\n        if (data.id) {\n          user = data;\n        }\n\n        return {\n          user,\n          session,\n          error: null\n        };\n      } catch (e) {\n        return {\n          user: null,\n          session: null,\n          error: e\n        };\n      }\n    });\n  }\n  /**\n   * Inside a browser context, `user()` will return the user data, if there is a logged in user.\n   *\n   * For server-side management, you can get a user through `auth.api.getUserByCookie()`\n   */\n\n\n  user() {\n    return this.currentUser;\n  }\n  /**\n   * Returns the session data, if there is an active session.\n   */\n\n\n  session() {\n    return this.currentSession;\n  }\n  /**\n   * Force refreshes the session including the user data in case it was updated in a different session.\n   */\n\n\n  refreshSession() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!((_a = this.currentSession) === null || _a === void 0 ? void 0 : _a.access_token)) throw new Error('Not logged in.'); // currentSession and currentUser will be updated to latest on _callRefreshToken\n\n        const {\n          error\n        } = yield this._callRefreshToken();\n        if (error) throw error;\n        return {\n          data: this.currentSession,\n          user: this.currentUser,\n          error: null\n        };\n      } catch (e) {\n        return {\n          data: null,\n          user: null,\n          error: e\n        };\n      }\n    });\n  }\n  /**\n   * Updates user data, if there is a logged in user.\n   */\n\n\n  update(attributes) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!((_a = this.currentSession) === null || _a === void 0 ? void 0 : _a.access_token)) throw new Error('Not logged in.');\n        const {\n          user,\n          error\n        } = yield this.api.updateUser(this.currentSession.access_token, attributes);\n        if (error) throw error;\n        if (!user) throw Error('Invalid user data.');\n        const session = Object.assign(Object.assign({}, this.currentSession), {\n          user\n        });\n\n        this._saveSession(session);\n\n        this._notifyAllSubscribers('USER_UPDATED');\n\n        return {\n          data: user,\n          user,\n          error: null\n        };\n      } catch (e) {\n        return {\n          data: null,\n          user: null,\n          error: e\n        };\n      }\n    });\n  }\n  /**\n   * Sets the session data from refresh_token and returns current Session and Error\n   * @param refresh_token a JWT token\n   */\n\n\n  setSession(refresh_token) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!refresh_token) {\n          throw new Error('No current session.');\n        }\n\n        const {\n          data,\n          error\n        } = yield this.api.refreshAccessToken(refresh_token);\n\n        if (error) {\n          return {\n            session: null,\n            error: error\n          };\n        }\n\n        this._saveSession(data);\n\n        this._notifyAllSubscribers('SIGNED_IN');\n\n        return {\n          session: data,\n          error: null\n        };\n      } catch (e) {\n        return {\n          error: e,\n          session: null\n        };\n      }\n    });\n  }\n  /**\n   * Overrides the JWT on the current client. The JWT will then be sent in all subsequent network requests.\n   * @param access_token a jwt access token\n   */\n\n\n  setAuth(access_token) {\n    this.currentSession = Object.assign(Object.assign({}, this.currentSession), {\n      access_token,\n      token_type: 'bearer',\n      user: this.user()\n    });\n\n    this._notifyAllSubscribers('TOKEN_REFRESHED');\n\n    return this.currentSession;\n  }\n  /**\n   * Gets the session data from a URL string\n   * @param options.storeSession Optionally store the session in the browser\n   */\n\n\n  getSessionFromUrl(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!isBrowser()) throw new Error('No browser detected.');\n        const error_description = getParameterByName('error_description');\n        if (error_description) throw new Error(error_description);\n        const provider_token = getParameterByName('provider_token');\n        const access_token = getParameterByName('access_token');\n        if (!access_token) throw new Error('No access_token detected.');\n        const expires_in = getParameterByName('expires_in');\n        if (!expires_in) throw new Error('No expires_in detected.');\n        const refresh_token = getParameterByName('refresh_token');\n        if (!refresh_token) throw new Error('No refresh_token detected.');\n        const token_type = getParameterByName('token_type');\n        if (!token_type) throw new Error('No token_type detected.');\n        const timeNow = Math.round(Date.now() / 1000);\n        const expires_at = timeNow + parseInt(expires_in);\n        const {\n          user,\n          error\n        } = yield this.api.getUser(access_token);\n        if (error) throw error;\n        const session = {\n          provider_token,\n          access_token,\n          expires_in: parseInt(expires_in),\n          expires_at,\n          refresh_token,\n          token_type,\n          user: user\n        };\n\n        if (options === null || options === void 0 ? void 0 : options.storeSession) {\n          this._saveSession(session);\n\n          const recoveryMode = getParameterByName('type');\n\n          this._notifyAllSubscribers('SIGNED_IN');\n\n          if (recoveryMode === 'recovery') {\n            this._notifyAllSubscribers('PASSWORD_RECOVERY');\n          }\n        } // Remove tokens from URL\n\n\n        window.location.hash = '';\n        return {\n          data: session,\n          error: null\n        };\n      } catch (e) {\n        return {\n          data: null,\n          error: e\n        };\n      }\n    });\n  }\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a \"SIGNED_OUT\" event.\n   *\n   * For server-side management, you can disable sessions by passing a JWT through to `auth.api.signOut(JWT: string)`\n   */\n\n\n  signOut() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const accessToken = (_a = this.currentSession) === null || _a === void 0 ? void 0 : _a.access_token;\n\n      this._removeSession();\n\n      this._notifyAllSubscribers('SIGNED_OUT');\n\n      if (accessToken) {\n        const {\n          error\n        } = yield this.api.signOut(accessToken);\n        if (error) return {\n          error\n        };\n      }\n\n      return {\n        error: null\n      };\n    });\n  }\n  /**\n   * Receive a notification every time an auth event happens.\n   * @returns {Subscription} A subscription object which can be used to unsubscribe itself.\n   */\n\n\n  onAuthStateChange(callback) {\n    try {\n      const id = uuid();\n      const subscription = {\n        id,\n        callback,\n        unsubscribe: () => {\n          this.stateChangeEmitters.delete(id);\n        }\n      };\n      this.stateChangeEmitters.set(id, subscription);\n      return {\n        data: subscription,\n        error: null\n      };\n    } catch (e) {\n      return {\n        data: null,\n        error: e\n      };\n    }\n  }\n\n  _handleEmailSignIn(email, password) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data,\n          error\n        } = yield this.api.signInWithEmail(email, password, {\n          redirectTo: options.redirectTo\n        });\n        if (error || !data) return {\n          data: null,\n          user: null,\n          session: null,\n          error\n        };\n\n        if (((_a = data === null || data === void 0 ? void 0 : data.user) === null || _a === void 0 ? void 0 : _a.confirmed_at) || ((_b = data === null || data === void 0 ? void 0 : data.user) === null || _b === void 0 ? void 0 : _b.email_confirmed_at)) {\n          this._saveSession(data);\n\n          this._notifyAllSubscribers('SIGNED_IN');\n        }\n\n        return {\n          data,\n          user: data.user,\n          session: data,\n          error: null\n        };\n      } catch (e) {\n        return {\n          data: null,\n          user: null,\n          session: null,\n          error: e\n        };\n      }\n    });\n  }\n\n  _handlePhoneSignIn(phone, password) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data,\n          error\n        } = yield this.api.signInWithPhone(phone, password);\n        if (error || !data) return {\n          data: null,\n          user: null,\n          session: null,\n          error\n        };\n\n        if ((_a = data === null || data === void 0 ? void 0 : data.user) === null || _a === void 0 ? void 0 : _a.phone_confirmed_at) {\n          this._saveSession(data);\n\n          this._notifyAllSubscribers('SIGNED_IN');\n        }\n\n        return {\n          data,\n          user: data.user,\n          session: data,\n          error: null\n        };\n      } catch (e) {\n        return {\n          data: null,\n          user: null,\n          session: null,\n          error: e\n        };\n      }\n    });\n  }\n\n  _handleProviderSignIn(provider) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const url = this.api.getUrlForProvider(provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes\n    });\n\n    try {\n      // try to open on the browser\n      if (isBrowser()) {\n        window.location.href = url;\n      }\n\n      return {\n        provider,\n        url,\n        data: null,\n        session: null,\n        user: null,\n        error: null\n      };\n    } catch (e) {\n      // fallback to returning the URL\n      if (url) return {\n        provider,\n        url,\n        data: null,\n        session: null,\n        user: null,\n        error: null\n      };\n      return {\n        data: null,\n        user: null,\n        session: null,\n        error: e\n      };\n    }\n  }\n\n  _handleOpenIDConnectSignIn(_ref4) {\n    let {\n      id_token,\n      nonce,\n      client_id,\n      issuer,\n      provider\n    } = _ref4;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (id_token && nonce && (client_id && issuer || provider)) {\n        try {\n          const {\n            data,\n            error\n          } = yield this.api.signInWithOpenIDConnect({\n            id_token,\n            nonce,\n            client_id,\n            issuer,\n            provider\n          });\n          if (error || !data) return {\n            user: null,\n            session: null,\n            error\n          };\n\n          this._saveSession(data);\n\n          this._notifyAllSubscribers('SIGNED_IN');\n\n          return {\n            user: data.user,\n            session: data,\n            error: null\n          };\n        } catch (e) {\n          return {\n            user: null,\n            session: null,\n            error: e\n          };\n        }\n      }\n\n      throw new Error(`You must provide a OpenID Connect provider with your id token and nonce.`);\n    });\n  }\n  /**\n   * Attempts to get the session from LocalStorage\n   * Note: this should never be async (even for React Native), as we need it to return immediately in the constructor.\n   */\n\n\n  _recoverSession() {\n    var _a;\n\n    try {\n      const json = isBrowser() && ((_a = this.localStorage) === null || _a === void 0 ? void 0 : _a.getItem(STORAGE_KEY));\n\n      if (!json || typeof json !== 'string') {\n        return null;\n      }\n\n      const data = JSON.parse(json);\n      const {\n        currentSession,\n        expiresAt\n      } = data;\n      const timeNow = Math.round(Date.now() / 1000);\n\n      if (expiresAt >= timeNow && (currentSession === null || currentSession === void 0 ? void 0 : currentSession.user)) {\n        this._saveSession(currentSession);\n\n        this._notifyAllSubscribers('SIGNED_IN');\n      }\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n\n\n  _recoverAndRefresh() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const json = isBrowser() && (yield this.localStorage.getItem(STORAGE_KEY));\n\n        if (!json) {\n          return null;\n        }\n\n        const data = JSON.parse(json);\n        const {\n          currentSession,\n          expiresAt\n        } = data;\n        const timeNow = Math.round(Date.now() / 1000);\n\n        if (expiresAt < timeNow) {\n          if (this.autoRefreshToken && currentSession.refresh_token) {\n            const {\n              error\n            } = yield this._callRefreshToken(currentSession.refresh_token);\n\n            if (error) {\n              console.log(error.message);\n              yield this._removeSession();\n            }\n          } else {\n            this._removeSession();\n          }\n        } else if (!currentSession) {\n          console.log('Current session is missing data.');\n\n          this._removeSession();\n        } else {\n          // should be handled on _recoverSession method already\n          // But we still need the code here to accommodate for AsyncStorage e.g. in React native\n          this._saveSession(currentSession);\n\n          this._notifyAllSubscribers('SIGNED_IN');\n        }\n      } catch (err) {\n        console.error(err);\n        return null;\n      }\n    });\n  }\n\n  _callRefreshToken(refresh_token) {\n    var _a;\n\n    if (refresh_token === void 0) {\n      refresh_token = (_a = this.currentSession) === null || _a === void 0 ? void 0 : _a.refresh_token;\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (!refresh_token) {\n          throw new Error('No current session.');\n        }\n\n        const {\n          data,\n          error\n        } = yield this.api.refreshAccessToken(refresh_token);\n        if (error) throw error;\n        if (!data) throw Error('Invalid session data.');\n\n        this._saveSession(data);\n\n        this._notifyAllSubscribers('TOKEN_REFRESHED');\n\n        this._notifyAllSubscribers('SIGNED_IN');\n\n        return {\n          data,\n          error: null\n        };\n      } catch (e) {\n        return {\n          data: null,\n          error: e\n        };\n      }\n    });\n  }\n\n  _notifyAllSubscribers(event) {\n    this.stateChangeEmitters.forEach(x => x.callback(event, this.currentSession));\n  }\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n\n\n  _saveSession(session) {\n    this.currentSession = session;\n    this.currentUser = session.user;\n    const expiresAt = session.expires_at;\n\n    if (expiresAt) {\n      const timeNow = Math.round(Date.now() / 1000);\n      const expiresIn = expiresAt - timeNow;\n      const refreshDurationBeforeExpires = expiresIn > 60 ? 60 : 0.5;\n\n      this._startAutoRefreshToken((expiresIn - refreshDurationBeforeExpires) * 1000);\n    } // Do we need any extra check before persist session\n    // access_token or user ?\n\n\n    if (this.persistSession && session.expires_at) {\n      this._persistSession(this.currentSession);\n    }\n  }\n\n  _persistSession(currentSession) {\n    const data = {\n      currentSession,\n      expiresAt: currentSession.expires_at\n    };\n    isBrowser() && this.localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  }\n\n  _removeSession() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.currentSession = null;\n      this.currentUser = null;\n      if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer);\n      isBrowser() && (yield this.localStorage.removeItem(STORAGE_KEY));\n    });\n  }\n  /**\n   * Clear and re-create refresh token timer\n   * @param value time intervals in milliseconds\n   */\n\n\n  _startAutoRefreshToken(value) {\n    if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer);\n    if (value <= 0 || !this.autoRefreshToken) return;\n    this.refreshTokenTimer = setTimeout(() => this._callRefreshToken(), value);\n    if (typeof this.refreshTokenTimer.unref === 'function') this.refreshTokenTimer.unref();\n  }\n  /**\n   * Listens for changes to LocalStorage and updates the current session.\n   */\n\n\n  _listenForMultiTabEvents() {\n    if (!this.multiTab || !isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n      // console.debug('Auth multi-tab support is disabled.')\n      return false;\n    }\n\n    try {\n      window === null || window === void 0 ? void 0 : window.addEventListener('storage', e => {\n        var _a;\n\n        if (e.key === STORAGE_KEY) {\n          const newSession = JSON.parse(String(e.newValue));\n\n          if ((_a = newSession === null || newSession === void 0 ? void 0 : newSession.currentSession) === null || _a === void 0 ? void 0 : _a.access_token) {\n            this._recoverAndRefresh();\n\n            this._notifyAllSubscribers('SIGNED_IN');\n          } else {\n            this._removeSession();\n\n            this._notifyAllSubscribers('SIGNED_OUT');\n          }\n        }\n      });\n    } catch (error) {\n      console.error('_listenForMultiTabEvents', error);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["GoTrueApi","isBrowser","getParameterByName","uuid","GOTRUE_URL","DEFAULT_HEADERS","STORAGE_KEY","polyfillGlobalThis","DEFAULT_OPTIONS","url","autoRefreshToken","persistSession","detectSessionInUrl","multiTab","headers","GoTrueClient","constructor","options","Map","settings","currentUser","currentSession","localStorage","globalThis","api","cookieOptions","fetch","_recoverSession","_recoverAndRefresh","_listenForMultiTabEvents","getSessionFromUrl","storeSession","then","error","console","signUp","email","password","phone","_removeSession","data","signUpWithPhone","captchaToken","signUpWithEmail","redirectTo","session","user","access_token","_saveSession","_notifyAllSubscribers","id","e","signIn","refreshToken","provider","oidc","sendMagicLinkEmail","shouldCreateUser","_handleEmailSignIn","sendMobileOTP","_handlePhoneSignIn","_callRefreshToken","_handleProviderSignIn","scopes","_handleOpenIDConnectSignIn","Error","verifyOTP","params","refreshSession","_a","update","attributes","updateUser","setSession","refresh_token","refreshAccessToken","setAuth","Object","token_type","error_description","provider_token","expires_in","timeNow","Math","round","Date","now","expires_at","parseInt","getUser","recoveryMode","window","location","hash","signOut","accessToken","onAuthStateChange","callback","subscription","unsubscribe","stateChangeEmitters","delete","set","signInWithEmail","confirmed_at","_b","email_confirmed_at","signInWithPhone","phone_confirmed_at","getUrlForProvider","href","id_token","nonce","client_id","issuer","signInWithOpenIDConnect","json","getItem","JSON","parse","expiresAt","log","message","err","event","forEach","x","expiresIn","refreshDurationBeforeExpires","_startAutoRefreshToken","_persistSession","setItem","stringify","refreshTokenTimer","clearTimeout","removeItem","value","setTimeout","unref","addEventListener","key","newSession","String","newValue"],"sources":["/Users/mridha/Todo_in_React/todo/node_modules/@supabase/gotrue-js/src/GoTrueClient.ts"],"sourcesContent":["import GoTrueApi from './GoTrueApi'\nimport { isBrowser, getParameterByName, uuid } from './lib/helpers'\nimport { GOTRUE_URL, DEFAULT_HEADERS, STORAGE_KEY } from './lib/constants'\nimport { polyfillGlobalThis } from './lib/polyfills'\nimport { Fetch } from './lib/fetch'\n\nimport type {\n  ApiError,\n  Session,\n  User,\n  UserAttributes,\n  Provider,\n  Subscription,\n  AuthChangeEvent,\n  CookieOptions,\n  UserCredentials,\n  VerifyOTPParams,\n  OpenIDConnectCredentials,\n} from './lib/types'\n\npolyfillGlobalThis() // Make \"globalThis\" available\n\nconst DEFAULT_OPTIONS = {\n  url: GOTRUE_URL,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  multiTab: true,\n  headers: DEFAULT_HEADERS,\n}\n\ntype AnyFunction = (...args: any[]) => any\ntype MaybePromisify<T> = T | Promise<T>\n\ntype PromisifyMethods<T> = {\n  [K in keyof T]: T[K] extends AnyFunction\n    ? (...args: Parameters<T[K]>) => MaybePromisify<ReturnType<T[K]>>\n    : T[K]\n}\n\ntype SupportedStorage = PromisifyMethods<Pick<Storage, 'getItem' | 'setItem' | 'removeItem'>>\n\nexport default class GoTrueClient {\n  /**\n   * Namespace for the GoTrue API methods.\n   * These can be used for example to get a user from a JWT in a server environment or reset a user's password.\n   */\n  api: GoTrueApi\n  /**\n   * The currently logged in user or null.\n   */\n  protected currentUser: User | null\n  /**\n   * The session object for the currently logged in user or null.\n   */\n  protected currentSession: Session | null\n\n  protected autoRefreshToken: boolean\n  protected persistSession: boolean\n  protected localStorage: SupportedStorage\n  protected multiTab: boolean\n  protected stateChangeEmitters: Map<string, Subscription> = new Map()\n  protected refreshTokenTimer?: ReturnType<typeof setTimeout>\n\n  /**\n   * Create a new client for use in the browser.\n   * @param options.url The URL of the GoTrue server.\n   * @param options.headers Any additional headers to send to the GoTrue server.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.localStorage Provide your own local storage implementation to use instead of the browser's local storage.\n   * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n   * @param options.cookieOptions\n   * @param options.fetch A custom fetch implementation.\n   */\n  constructor(options: {\n    url?: string\n    headers?: { [key: string]: string }\n    detectSessionInUrl?: boolean\n    autoRefreshToken?: boolean\n    persistSession?: boolean\n    localStorage?: SupportedStorage\n    multiTab?: boolean\n    cookieOptions?: CookieOptions\n    fetch?: Fetch\n  }) {\n    const settings = { ...DEFAULT_OPTIONS, ...options }\n    this.currentUser = null\n    this.currentSession = null\n    this.autoRefreshToken = settings.autoRefreshToken\n    this.persistSession = settings.persistSession\n    this.multiTab = settings.multiTab\n    this.localStorage = settings.localStorage || globalThis.localStorage\n    this.api = new GoTrueApi({\n      url: settings.url,\n      headers: settings.headers,\n      cookieOptions: settings.cookieOptions,\n      fetch: settings.fetch,\n    })\n    this._recoverSession()\n    this._recoverAndRefresh()\n    this._listenForMultiTabEvents()\n\n    if (settings.detectSessionInUrl && isBrowser() && !!getParameterByName('access_token')) {\n      // Handle the OAuth redirect\n      this.getSessionFromUrl({ storeSession: true }).then(({ error }) => {\n        if (error) {\n          console.error('Error getting session from URL.', error)\n        }\n      })\n    }\n  }\n\n  /**\n   * Creates a new user.\n   * @type UserCredentials\n   * @param email The user's email address.\n   * @param password The user's password.\n   * @param phone The user's phone number.\n   * @param redirectTo The redirect URL attached to the signup confirmation link. Does not redirect the user if it's a mobile signup.\n   * @param data Optional user metadata.\n   */\n  async signUp(\n    { email, password, phone }: UserCredentials,\n    options: {\n      redirectTo?: string\n      data?: object\n      captchaToken?: string\n    } = {}\n  ): Promise<{\n    user: User | null\n    session: Session | null\n    error: ApiError | null\n  }> {\n    try {\n      this._removeSession()\n\n      const { data, error } =\n        phone && password\n          ? await this.api.signUpWithPhone(phone!, password!, {\n              data: options.data,\n              captchaToken: options.captchaToken,\n            })\n          : await this.api.signUpWithEmail(email!, password!, {\n              redirectTo: options.redirectTo,\n              data: options.data,\n              captchaToken: options.captchaToken,\n            })\n\n      if (error) {\n        throw error\n      }\n\n      if (!data) {\n        throw 'An error occurred on sign up.'\n      }\n\n      let session: Session | null = null\n      let user: User | null = null\n\n      if ((data as Session).access_token) {\n        session = data as Session\n        user = session.user as User\n        this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n\n      if ((data as User).id) {\n        user = data as User\n      }\n\n      return { user, session, error: null }\n    } catch (e) {\n      return { user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Log in an existing user, or login via a third-party provider.\n   * @type UserCredentials\n   * @param email The user's email address.\n   * @param phone The user's phone number.\n   * @param password The user's password.\n   * @param refreshToken A valid refresh token that was returned on login.\n   * @param provider One of the providers supported by GoTrue.\n   * @param redirectTo A URL to send the user to after they are confirmed (OAuth logins only).\n   * @param shouldCreateUser A boolean flag to indicate whether to automatically create a user on magiclink / otp sign-ins if the user doesn't exist. Defaults to true.\n   * @param scopes A space-separated list of scopes granted to the OAuth application.\n   */\n  async signIn(\n    { email, phone, password, refreshToken, provider, oidc }: UserCredentials,\n    options: {\n      redirectTo?: string\n      shouldCreateUser?: boolean\n      scopes?: string\n      captchaToken?: string\n    } = {}\n  ): Promise<{\n    session: Session | null\n    user: User | null\n    provider?: Provider\n    url?: string | null\n    error: ApiError | null\n  }> {\n    try {\n      this._removeSession()\n\n      if (email && !password) {\n        const { error } = await this.api.sendMagicLinkEmail(email, {\n          redirectTo: options.redirectTo,\n          shouldCreateUser: options.shouldCreateUser,\n          captchaToken: options.captchaToken,\n        })\n        return { user: null, session: null, error }\n      }\n      if (email && password) {\n        return this._handleEmailSignIn(email, password, {\n          redirectTo: options.redirectTo,\n        })\n      }\n      if (phone && !password) {\n        const { error } = await this.api.sendMobileOTP(phone, {\n          shouldCreateUser: options.shouldCreateUser,\n          captchaToken: options.captchaToken,\n        })\n        return { user: null, session: null, error }\n      }\n      if (phone && password) {\n        return this._handlePhoneSignIn(phone, password)\n      }\n      if (refreshToken) {\n        // currentSession and currentUser will be updated to latest on _callRefreshToken using the passed refreshToken\n        const { error } = await this._callRefreshToken(refreshToken)\n        if (error) throw error\n\n        return {\n          user: this.currentUser,\n          session: this.currentSession,\n          error: null,\n        }\n      }\n      if (provider) {\n        return this._handleProviderSignIn(provider, {\n          redirectTo: options.redirectTo,\n          scopes: options.scopes,\n        })\n      }\n      if (oidc) {\n        return this._handleOpenIDConnectSignIn(oidc)\n      }\n      throw new Error(\n        `You must provide either an email, phone number, a third-party provider or OpenID Connect.`\n      )\n    } catch (e) {\n      return { user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Log in a user given a User supplied OTP received via mobile.\n   * @param email The user's email address.\n   * @param phone The user's phone number.\n   * @param token The user's password.\n   * @param type The user's verification type.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n  async verifyOTP(\n    params: VerifyOTPParams,\n    options: {\n      redirectTo?: string\n    } = {}\n  ): Promise<{\n    user: User | null\n    session: Session | null\n    error: ApiError | null\n  }> {\n    try {\n      this._removeSession()\n\n      const { data, error } = await this.api.verifyOTP(params, options)\n\n      if (error) {\n        throw error\n      }\n\n      if (!data) {\n        throw 'An error occurred on token verification.'\n      }\n\n      let session: Session | null = null\n      let user: User | null = null\n\n      if ((data as Session).access_token) {\n        session = data as Session\n        user = session.user as User\n        this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n\n      if ((data as User).id) {\n        user = data as User\n      }\n\n      return { user, session, error: null }\n    } catch (e) {\n      return { user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Inside a browser context, `user()` will return the user data, if there is a logged in user.\n   *\n   * For server-side management, you can get a user through `auth.api.getUserByCookie()`\n   */\n  user(): User | null {\n    return this.currentUser\n  }\n\n  /**\n   * Returns the session data, if there is an active session.\n   */\n  session(): Session | null {\n    return this.currentSession\n  }\n\n  /**\n   * Force refreshes the session including the user data in case it was updated in a different session.\n   */\n  async refreshSession(): Promise<{\n    data: Session | null\n    user: User | null\n    error: ApiError | null\n  }> {\n    try {\n      if (!this.currentSession?.access_token) throw new Error('Not logged in.')\n\n      // currentSession and currentUser will be updated to latest on _callRefreshToken\n      const { error } = await this._callRefreshToken()\n      if (error) throw error\n\n      return { data: this.currentSession, user: this.currentUser, error: null }\n    } catch (e) {\n      return { data: null, user: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Updates user data, if there is a logged in user.\n   */\n  async update(\n    attributes: UserAttributes\n  ): Promise<{ data: User | null; user: User | null; error: ApiError | null }> {\n    try {\n      if (!this.currentSession?.access_token) throw new Error('Not logged in.')\n\n      const { user, error } = await this.api.updateUser(\n        this.currentSession.access_token,\n        attributes\n      )\n      if (error) throw error\n      if (!user) throw Error('Invalid user data.')\n\n      const session = { ...this.currentSession, user }\n      this._saveSession(session)\n      this._notifyAllSubscribers('USER_UPDATED')\n\n      return { data: user, user, error: null }\n    } catch (e) {\n      return { data: null, user: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sets the session data from refresh_token and returns current Session and Error\n   * @param refresh_token a JWT token\n   */\n  async setSession(\n    refresh_token: string\n  ): Promise<{ session: Session | null; error: ApiError | null }> {\n    try {\n      if (!refresh_token) {\n        throw new Error('No current session.')\n      }\n      const { data, error } = await this.api.refreshAccessToken(refresh_token)\n      if (error) {\n        return { session: null, error: error }\n      }\n\n      this._saveSession(data!)\n      this._notifyAllSubscribers('SIGNED_IN')\n      return { session: data, error: null }\n    } catch (e) {\n      return { error: e as ApiError, session: null }\n    }\n  }\n\n  /**\n   * Overrides the JWT on the current client. The JWT will then be sent in all subsequent network requests.\n   * @param access_token a jwt access token\n   */\n  setAuth(access_token: string): Session {\n    this.currentSession = {\n      ...this.currentSession,\n      access_token,\n      token_type: 'bearer',\n      user: this.user(),\n    }\n\n    this._notifyAllSubscribers('TOKEN_REFRESHED')\n\n    return this.currentSession\n  }\n\n  /**\n   * Gets the session data from a URL string\n   * @param options.storeSession Optionally store the session in the browser\n   */\n  async getSessionFromUrl(options?: {\n    storeSession?: boolean\n  }): Promise<{ data: Session | null; error: ApiError | null }> {\n    try {\n      if (!isBrowser()) throw new Error('No browser detected.')\n\n      const error_description = getParameterByName('error_description')\n      if (error_description) throw new Error(error_description)\n\n      const provider_token = getParameterByName('provider_token')\n      const access_token = getParameterByName('access_token')\n      if (!access_token) throw new Error('No access_token detected.')\n      const expires_in = getParameterByName('expires_in')\n      if (!expires_in) throw new Error('No expires_in detected.')\n      const refresh_token = getParameterByName('refresh_token')\n      if (!refresh_token) throw new Error('No refresh_token detected.')\n      const token_type = getParameterByName('token_type')\n      if (!token_type) throw new Error('No token_type detected.')\n\n      const timeNow = Math.round(Date.now() / 1000)\n      const expires_at = timeNow + parseInt(expires_in)\n\n      const { user, error } = await this.api.getUser(access_token)\n      if (error) throw error\n\n      const session: Session = {\n        provider_token,\n        access_token,\n        expires_in: parseInt(expires_in),\n        expires_at,\n        refresh_token,\n        token_type,\n        user: user!,\n      }\n      if (options?.storeSession) {\n        this._saveSession(session)\n        const recoveryMode = getParameterByName('type')\n        this._notifyAllSubscribers('SIGNED_IN')\n        if (recoveryMode === 'recovery') {\n          this._notifyAllSubscribers('PASSWORD_RECOVERY')\n        }\n      }\n      // Remove tokens from URL\n      window.location.hash = ''\n\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a \"SIGNED_OUT\" event.\n   *\n   * For server-side management, you can disable sessions by passing a JWT through to `auth.api.signOut(JWT: string)`\n   */\n  async signOut(): Promise<{ error: ApiError | null }> {\n    const accessToken = this.currentSession?.access_token\n    this._removeSession()\n    this._notifyAllSubscribers('SIGNED_OUT')\n    if (accessToken) {\n      const { error } = await this.api.signOut(accessToken)\n      if (error) return { error }\n    }\n    return { error: null }\n  }\n\n  /**\n   * Receive a notification every time an auth event happens.\n   * @returns {Subscription} A subscription object which can be used to unsubscribe itself.\n   */\n  onAuthStateChange(callback: (event: AuthChangeEvent, session: Session | null) => void): {\n    data: Subscription | null\n    error: ApiError | null\n  } {\n    try {\n      const id: string = uuid()\n      const subscription: Subscription = {\n        id,\n        callback,\n        unsubscribe: () => {\n          this.stateChangeEmitters.delete(id)\n        },\n      }\n      this.stateChangeEmitters.set(id, subscription)\n      return { data: subscription, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  private async _handleEmailSignIn(\n    email: string,\n    password: string,\n    options: {\n      redirectTo?: string\n    } = {}\n  ) {\n    try {\n      const { data, error } = await this.api.signInWithEmail(email, password, {\n        redirectTo: options.redirectTo,\n      })\n      if (error || !data) return { data: null, user: null, session: null, error }\n\n      if (data?.user?.confirmed_at || data?.user?.email_confirmed_at) {\n        this._saveSession(data)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n\n      return { data, user: data.user, session: data, error: null }\n    } catch (e) {\n      return { data: null, user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  private async _handlePhoneSignIn(phone: string, password: string) {\n    try {\n      const { data, error } = await this.api.signInWithPhone(phone, password)\n      if (error || !data) return { data: null, user: null, session: null, error }\n\n      if (data?.user?.phone_confirmed_at) {\n        this._saveSession(data)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n\n      return { data, user: data.user, session: data, error: null }\n    } catch (e) {\n      return { data: null, user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  private _handleProviderSignIn(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n    } = {}\n  ) {\n    const url: string = this.api.getUrlForProvider(provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes,\n    })\n\n    try {\n      // try to open on the browser\n      if (isBrowser()) {\n        window.location.href = url\n      }\n      return { provider, url, data: null, session: null, user: null, error: null }\n    } catch (e) {\n      // fallback to returning the URL\n      if (url) return { provider, url, data: null, session: null, user: null, error: null }\n      return { data: null, user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  private async _handleOpenIDConnectSignIn({\n    id_token,\n    nonce,\n    client_id,\n    issuer,\n    provider,\n  }: OpenIDConnectCredentials): Promise<{\n    session: Session | null\n    user: User | null\n    error: ApiError | null\n  }> {\n    if (id_token && nonce && ((client_id && issuer) || provider)) {\n      try {\n        const { data, error } = await this.api.signInWithOpenIDConnect({\n          id_token,\n          nonce,\n          client_id,\n          issuer,\n          provider,\n        })\n        if (error || !data) return { user: null, session: null, error }\n        this._saveSession(data)\n        this._notifyAllSubscribers('SIGNED_IN')\n        return { user: data.user, session: data, error: null }\n      } catch (e) {\n        return { user: null, session: null, error: e as ApiError }\n      }\n    }\n    throw new Error(`You must provide a OpenID Connect provider with your id token and nonce.`)\n  }\n\n  /**\n   * Attempts to get the session from LocalStorage\n   * Note: this should never be async (even for React Native), as we need it to return immediately in the constructor.\n   */\n  private _recoverSession() {\n    try {\n      const json = isBrowser() && this.localStorage?.getItem(STORAGE_KEY)\n      if (!json || typeof json !== 'string') {\n        return null\n      }\n\n      const data = JSON.parse(json)\n      const { currentSession, expiresAt } = data\n      const timeNow = Math.round(Date.now() / 1000)\n\n      if (expiresAt >= timeNow && currentSession?.user) {\n        this._saveSession(currentSession)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n  private async _recoverAndRefresh() {\n    try {\n      const json = isBrowser() && (await this.localStorage.getItem(STORAGE_KEY))\n      if (!json) {\n        return null\n      }\n\n      const data = JSON.parse(json)\n      const { currentSession, expiresAt } = data\n      const timeNow = Math.round(Date.now() / 1000)\n\n      if (expiresAt < timeNow) {\n        if (this.autoRefreshToken && currentSession.refresh_token) {\n          const { error } = await this._callRefreshToken(currentSession.refresh_token)\n          if (error) {\n            console.log(error.message)\n            await this._removeSession()\n          }\n        } else {\n          this._removeSession()\n        }\n      } else if (!currentSession) {\n        console.log('Current session is missing data.')\n        this._removeSession()\n      } else {\n        // should be handled on _recoverSession method already\n        // But we still need the code here to accommodate for AsyncStorage e.g. in React native\n        this._saveSession(currentSession)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n    } catch (err) {\n      console.error(err)\n      return null\n    }\n  }\n\n  private async _callRefreshToken(refresh_token = this.currentSession?.refresh_token) {\n    try {\n      if (!refresh_token) {\n        throw new Error('No current session.')\n      }\n      const { data, error } = await this.api.refreshAccessToken(refresh_token)\n      if (error) throw error\n      if (!data) throw Error('Invalid session data.')\n\n      this._saveSession(data)\n      this._notifyAllSubscribers('TOKEN_REFRESHED')\n      this._notifyAllSubscribers('SIGNED_IN')\n\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  private _notifyAllSubscribers(event: AuthChangeEvent) {\n    this.stateChangeEmitters.forEach((x) => x.callback(event, this.currentSession))\n  }\n\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n  private _saveSession(session: Session) {\n    this.currentSession = session\n    this.currentUser = session.user\n\n    const expiresAt = session.expires_at\n    if (expiresAt) {\n      const timeNow = Math.round(Date.now() / 1000)\n      const expiresIn = expiresAt - timeNow\n      const refreshDurationBeforeExpires = expiresIn > 60 ? 60 : 0.5\n      this._startAutoRefreshToken((expiresIn - refreshDurationBeforeExpires) * 1000)\n    }\n\n    // Do we need any extra check before persist session\n    // access_token or user ?\n    if (this.persistSession && session.expires_at) {\n      this._persistSession(this.currentSession)\n    }\n  }\n\n  private _persistSession(currentSession: Session) {\n    const data = { currentSession, expiresAt: currentSession.expires_at }\n    isBrowser() && this.localStorage.setItem(STORAGE_KEY, JSON.stringify(data))\n  }\n\n  private async _removeSession() {\n    this.currentSession = null\n    this.currentUser = null\n    if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer)\n    isBrowser() && (await this.localStorage.removeItem(STORAGE_KEY))\n  }\n\n  /**\n   * Clear and re-create refresh token timer\n   * @param value time intervals in milliseconds\n   */\n  private _startAutoRefreshToken(value: number) {\n    if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer)\n    if (value <= 0 || !this.autoRefreshToken) return\n\n    this.refreshTokenTimer = setTimeout(() => this._callRefreshToken(), value)\n    if (typeof this.refreshTokenTimer.unref === 'function') this.refreshTokenTimer.unref()\n  }\n\n  /**\n   * Listens for changes to LocalStorage and updates the current session.\n   */\n  private _listenForMultiTabEvents() {\n    if (!this.multiTab || !isBrowser() || !window?.addEventListener) {\n      // console.debug('Auth multi-tab support is disabled.')\n      return false\n    }\n\n    try {\n      window?.addEventListener('storage', (e: StorageEvent) => {\n        if (e.key === STORAGE_KEY) {\n          const newSession = JSON.parse(String(e.newValue))\n          if (newSession?.currentSession?.access_token) {\n            this._recoverAndRefresh()\n            this._notifyAllSubscribers('SIGNED_IN')\n          } else {\n            this._removeSession()\n            this._notifyAllSubscribers('SIGNED_OUT')\n          }\n        }\n      })\n    } catch (error) {\n      console.error('_listenForMultiTabEvents', error)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}