{"ast":null,"code":"// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\nexport default class Serializer {\n  constructor() {\n    this.HEADER_LENGTH = 1;\n  }\n\n  decode(rawPayload, callback) {\n    if (rawPayload.constructor === ArrayBuffer) {\n      return callback(this._binaryDecode(rawPayload));\n    }\n\n    if (typeof rawPayload === 'string') {\n      return callback(JSON.parse(rawPayload));\n    }\n\n    return callback({});\n  }\n\n  _binaryDecode(buffer) {\n    const view = new DataView(buffer);\n    const decoder = new TextDecoder();\n    return this._decodeBroadcast(buffer, view, decoder);\n  }\n\n  _decodeBroadcast(buffer, view, decoder) {\n    const topicSize = view.getUint8(1);\n    const eventSize = view.getUint8(2);\n    let offset = this.HEADER_LENGTH + 2;\n    const topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n    offset = offset + topicSize;\n    const event = decoder.decode(buffer.slice(offset, offset + eventSize));\n    offset = offset + eventSize;\n    const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));\n    return {\n      ref: null,\n      topic: topic,\n      event: event,\n      payload: data\n    };\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,eAAc,MAAOA,UAAP,CAAiB;AAA/BC;AACE,yBAAgB,CAAhB;AA4CD;;AA1CCC,QAAM,CAACC,UAAD,EAAmCC,QAAnC,EAAqD;AACzD,QAAID,UAAU,CAACF,WAAX,KAA2BI,WAA/B,EAA4C;AAC1C,aAAOD,QAAQ,CAAC,KAAKE,aAAL,CAAmBH,UAAnB,CAAD,CAAf;AACD;;AAED,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,aAAOC,QAAQ,CAACG,IAAI,CAACC,KAAL,CAAWL,UAAX,CAAD,CAAf;AACD;;AAED,WAAOC,QAAQ,CAAC,EAAD,CAAf;AACD;;AAEOE,eAAa,CAACG,MAAD,EAAoB;AACvC,UAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAaF,MAAb,CAAb;AACA,UAAMG,OAAO,GAAG,IAAIC,WAAJ,EAAhB;AAEA,WAAO,KAAKC,gBAAL,CAAsBL,MAAtB,EAA8BC,IAA9B,EAAoCE,OAApC,CAAP;AACD;;AAEOE,kBAAgB,CACtBL,MADsB,EAEtBC,IAFsB,EAGtBE,OAHsB,EAGF;AAOpB,UAAMG,SAAS,GAAGL,IAAI,CAACM,QAAL,CAAc,CAAd,CAAlB;AACA,UAAMC,SAAS,GAAGP,IAAI,CAACM,QAAL,CAAc,CAAd,CAAlB;AACA,QAAIE,MAAM,GAAG,KAAKC,aAAL,GAAqB,CAAlC;AACA,UAAMC,KAAK,GAAGR,OAAO,CAACV,MAAR,CAAeO,MAAM,CAACY,KAAP,CAAaH,MAAb,EAAqBA,MAAM,GAAGH,SAA9B,CAAf,CAAd;AACAG,UAAM,GAAGA,MAAM,GAAGH,SAAlB;AACA,UAAMO,KAAK,GAAGV,OAAO,CAACV,MAAR,CAAeO,MAAM,CAACY,KAAP,CAAaH,MAAb,EAAqBA,MAAM,GAAGD,SAA9B,CAAf,CAAd;AACAC,UAAM,GAAGA,MAAM,GAAGD,SAAlB;AACA,UAAMM,IAAI,GAAGhB,IAAI,CAACC,KAAL,CACXI,OAAO,CAACV,MAAR,CAAeO,MAAM,CAACY,KAAP,CAAaH,MAAb,EAAqBT,MAAM,CAACe,UAA5B,CAAf,CADW,CAAb;AAIA,WAAO;AAAEC,SAAG,EAAE,IAAP;AAAaL,WAAK,EAAEA,KAApB;AAA2BE,WAAK,EAAEA,KAAlC;AAAyCI,aAAO,EAAEH;AAAlD,KAAP;AACD;;AA5C4B","names":["Serializer","constructor","decode","rawPayload","callback","ArrayBuffer","_binaryDecode","JSON","parse","buffer","view","DataView","decoder","TextDecoder","_decodeBroadcast","topicSize","getUint8","eventSize","offset","HEADER_LENGTH","topic","slice","event","data","byteLength","ref","payload"],"sources":["/Users/mridha/Todo_in_React/todo/node_modules/@supabase/realtime-js/src/lib/serializer.ts"],"sourcesContent":["// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\n\nexport default class Serializer {\n  HEADER_LENGTH = 1\n\n  decode(rawPayload: ArrayBuffer | string, callback: Function) {\n    if (rawPayload.constructor === ArrayBuffer) {\n      return callback(this._binaryDecode(rawPayload))\n    }\n\n    if (typeof rawPayload === 'string') {\n      return callback(JSON.parse(rawPayload))\n    }\n\n    return callback({})\n  }\n\n  private _binaryDecode(buffer: ArrayBuffer) {\n    const view = new DataView(buffer)\n    const decoder = new TextDecoder()\n\n    return this._decodeBroadcast(buffer, view, decoder)\n  }\n\n  private _decodeBroadcast(\n    buffer: ArrayBuffer,\n    view: DataView,\n    decoder: TextDecoder\n  ): {\n    ref: null\n    topic: string\n    event: string\n    payload: object\n  } {\n    const topicSize = view.getUint8(1)\n    const eventSize = view.getUint8(2)\n    let offset = this.HEADER_LENGTH + 2\n    const topic = decoder.decode(buffer.slice(offset, offset + topicSize))\n    offset = offset + topicSize\n    const event = decoder.decode(buffer.slice(offset, offset + eventSize))\n    offset = offset + eventSize\n    const data = JSON.parse(\n      decoder.decode(buffer.slice(offset, buffer.byteLength))\n    )\n\n    return { ref: null, topic: topic, event: event, payload: data }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}