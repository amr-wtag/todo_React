{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { resolveFetch } from './helper';\nexport class FunctionsClient {\n  constructor(url) {\n    let {\n      headers = {},\n      customFetch\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.url = url;\n    this.headers = headers;\n    this.fetch = resolveFetch(customFetch);\n  }\n  /**\n   * Updates the authorization header\n   * @params token - the new jwt token sent in the authorisation header\n   */\n\n\n  setAuth(token) {\n    this.headers.Authorization = `Bearer ${token}`;\n  }\n  /**\n   * Invokes a function\n   * @param functionName - the name of the function to invoke\n   * @param invokeOptions - object with the following properties\n   * `headers`: object representing the headers to send with the request\n   * `body`: the body of the request\n   * `responseType`: how the response should be parsed. The default is `json`\n   */\n\n\n  invoke(functionName, invokeOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          headers,\n          body\n        } = invokeOptions !== null && invokeOptions !== void 0 ? invokeOptions : {};\n        const response = yield this.fetch(`${this.url}/${functionName}`, {\n          method: 'POST',\n          headers: Object.assign({}, this.headers, headers),\n          body\n        });\n        const isRelayError = response.headers.get('x-relay-error');\n\n        if (isRelayError && isRelayError === 'true') {\n          return {\n            data: null,\n            error: new Error(yield response.text())\n          };\n        }\n\n        let data;\n        const {\n          responseType\n        } = invokeOptions !== null && invokeOptions !== void 0 ? invokeOptions : {};\n\n        if (!responseType || responseType === 'json') {\n          data = yield response.json();\n        } else if (responseType === 'arrayBuffer') {\n          data = yield response.arrayBuffer();\n        } else if (responseType === 'blob') {\n          data = yield response.blob();\n        } else {\n          data = yield response.text();\n        }\n\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,YAAT,QAA6B,UAA7B;AAGA,OAAM,MAAOC,eAAP,CAAsB;AAK1BC,cACEC,GADF,EAQQ;AAAA,QANN;AACEC,aAAO,GAAG,EADZ;AAEEC;AAFF,KAMM,uEAAF,EAAE;AAEN,SAAKF,GAAL,GAAWA,GAAX;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKE,KAAL,GAAaN,YAAY,CAACK,WAAD,CAAzB;AACD;AAED;;;;;;AAIAE,SAAO,CAACC,KAAD,EAAc;AACnB,SAAKJ,OAAL,CAAaK,aAAb,GAA6B,UAAUD,KAAK,EAA5C;AACD;AAED;;;;;;;;;;AAQME,QAAM,CACVC,YADU,EAEVC,aAFU,EAE2B;;AAErC,UAAI;AACF,cAAM;AAAER,iBAAF;AAAWS;AAAX,YAAoBD,aAAa,SAAb,iBAAa,WAAb,mBAAiB,EAA3C;AACA,cAAME,QAAQ,GAAG,MAAM,KAAKR,KAAL,CAAW,GAAG,KAAKH,GAAG,IAAIQ,YAAY,EAAtC,EAA0C;AAC/DI,gBAAM,EAAE,MADuD;AAE/DX,iBAAO,EAAEY,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKb,OAAvB,EAAgCA,OAAhC,CAFsD;AAG/DS;AAH+D,SAA1C,CAAvB;AAMA,cAAMK,YAAY,GAAGJ,QAAQ,CAACV,OAAT,CAAiBe,GAAjB,CAAqB,eAArB,CAArB;;AACA,YAAID,YAAY,IAAIA,YAAY,KAAK,MAArC,EAA6C;AAC3C,iBAAO;AAAEE,gBAAI,EAAE,IAAR;AAAcC,iBAAK,EAAE,IAAIC,KAAJ,CAAU,MAAMR,QAAQ,CAACS,IAAT,EAAhB;AAArB,WAAP;AACD;;AAED,YAAIH,IAAJ;AACA,cAAM;AAAEI;AAAF,YAAmBZ,aAAa,SAAb,iBAAa,WAAb,mBAAiB,EAA1C;;AACA,YAAI,CAACY,YAAD,IAAiBA,YAAY,KAAK,MAAtC,EAA8C;AAC5CJ,cAAI,GAAG,MAAMN,QAAQ,CAACW,IAAT,EAAb;AACD,SAFD,MAEO,IAAID,YAAY,KAAK,aAArB,EAAoC;AACzCJ,cAAI,GAAG,MAAMN,QAAQ,CAACY,WAAT,EAAb;AACD,SAFM,MAEA,IAAIF,YAAY,KAAK,MAArB,EAA6B;AAClCJ,cAAI,GAAG,MAAMN,QAAQ,CAACa,IAAT,EAAb;AACD,SAFM,MAEA;AACLP,cAAI,GAAG,MAAMN,QAAQ,CAACS,IAAT,EAAb;AACD;;AAED,eAAO;AAAEH,cAAF;AAAQC,eAAK,EAAE;AAAf,SAAP;AACD,OA1BD,CA0BE,OAAOA,KAAP,EAAmB;AACnB,eAAO;AAAED,cAAI,EAAE,IAAR;AAAcC;AAAd,SAAP;AACD;AACF;AAAA;;AArEyB","names":["resolveFetch","FunctionsClient","constructor","url","headers","customFetch","fetch","setAuth","token","Authorization","invoke","functionName","invokeOptions","body","response","method","Object","assign","isRelayError","get","data","error","Error","text","responseType","json","arrayBuffer","blob"],"sources":["/Users/mridha/Todo_in_React/todo/node_modules/@supabase/functions-js/src/index.ts"],"sourcesContent":["import { resolveFetch } from './helper'\nimport { Fetch, FunctionInvokeOptions } from './types'\n\nexport class FunctionsClient {\n  protected url: string\n  protected headers: Record<string, string>\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      customFetch,\n    }: {\n      headers?: Record<string, string>\n      customFetch?: Fetch\n    } = {}\n  ) {\n    this.url = url\n    this.headers = headers\n    this.fetch = resolveFetch(customFetch)\n  }\n\n  /**\n   * Updates the authorization header\n   * @params token - the new jwt token sent in the authorisation header\n   */\n  setAuth(token: string) {\n    this.headers.Authorization = `Bearer ${token}`\n  }\n\n  /**\n   * Invokes a function\n   * @param functionName - the name of the function to invoke\n   * @param invokeOptions - object with the following properties\n   * `headers`: object representing the headers to send with the request\n   * `body`: the body of the request\n   * `responseType`: how the response should be parsed. The default is `json`\n   */\n  async invoke<T = any>(\n    functionName: string,\n    invokeOptions?: FunctionInvokeOptions\n  ): Promise<{ data: T; error: null } | { data: null; error: Error }> {\n    try {\n      const { headers, body } = invokeOptions ?? {}\n      const response = await this.fetch(`${this.url}/${functionName}`, {\n        method: 'POST',\n        headers: Object.assign({}, this.headers, headers),\n        body,\n      })\n\n      const isRelayError = response.headers.get('x-relay-error')\n      if (isRelayError && isRelayError === 'true') {\n        return { data: null, error: new Error(await response.text()) }\n      }\n\n      let data\n      const { responseType } = invokeOptions ?? {}\n      if (!responseType || responseType === 'json') {\n        data = await response.json()\n      } else if (responseType === 'arrayBuffer') {\n        data = await response.arrayBuffer()\n      } else if (responseType === 'blob') {\n        data = await response.blob()\n      } else {\n        data = await response.text()\n      }\n\n      return { data, error: null }\n    } catch (error: any) {\n      return { data: null, error }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}