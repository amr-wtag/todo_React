{"ast":null,"code":"var _jsxFileName = \"/Users/mridha/Todo_in_React/todo/src/Todo.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport spin from \"./images/bigspin.svg\";\nimport Edit from \"./images/edit.svg\";\nimport { Button, TextArea, Icon, LabelTag } from \"./App\";\nimport { ReactComponent as Tick } from \"./images/tick.svg\";\nimport deleteSvg from \"./images/Vector.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Todo = _ref => {\n  _s();\n\n  let {\n    todo,\n    onDelete,\n    completeHandler,\n    editToggle\n  } = _ref;\n  const [newName, setNewName] = useState(todo.name);\n\n  const edit = e => {\n    setNewName(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"todo\",\n    className: \"todo\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${todo.isLoading && \"blur\"}`,\n      children: [todo.isEdit === true ? /*#__PURE__*/_jsxDEV(TextArea, {\n        id: \"editName\",\n        className: \"editName\",\n        value: newName,\n        onChange: edit,\n        autoFocus: true,\n        onFocus: e => {\n          var val = e.target.value;\n          e.target.value = \"\";\n          e.target.value = val;\n        },\n        onKeyPress: e => {\n          if (e.key === \"Enter\") {\n            e.preventDefault();\n            editToggle(todo.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(LabelTag, {\n          id: \"showName\",\n          className: `${todo.completed_on && \"completed\"}`,\n          children: todo.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"createdAt\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(LabelTag, {\n            children: [\"created_at: \", todo.created_at]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"boxedButtonCompletedOn\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"allBoxedButon\",\n          children: [todo.isEdit && /*#__PURE__*/_jsxDEV(Button, {\n            className: \"saveButton btn\",\n            onClick: () => editToggle(todo.id),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), !todo.completed_on && /*#__PURE__*/_jsxDEV(Button, {\n            className: \"boxedButton \",\n            onClick: () => {\n              completeHandler(todo.id);\n            },\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              src: Tick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), !todo.completed_on && !todo.isEdit && /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => editToggle(todo.id),\n            className: \"boxedButton \",\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              src: Edit,\n              alt: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"boxedButton\",\n            onClick: () => onDelete(todo.id),\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              src: deleteSvg,\n              alt: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), todo.completed_on && /*#__PURE__*/_jsxDEV(LabelTag, {\n          className: \"completedOn\",\n          children: [\"completed in\", \" \", Math.ceil(Math.abs(Date.parse(todo.completed_on) - Date.parse(todo.created_at)) / (1000 * 60 * 60 * 24)), \" \", \"days\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), todo.isLoading && /*#__PURE__*/_jsxDEV(Icon, {\n      className: \"spinning rotateDiv\",\n      src: spin,\n      alt: \"spin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Todo, \"DxlEuY6zXL8bEDrPQaQmgvnI+sw=\");\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/mridha/Todo_in_React/todo/src/Todo.jsx"],"names":["useState","spin","Edit","Button","TextArea","Icon","LabelTag","ReactComponent","Tick","deleteSvg","Todo","todo","onDelete","completeHandler","editToggle","newName","setNewName","name","edit","e","target","value","isLoading","isEdit","val","key","preventDefault","id","completed_on","created_at","Math","ceil","abs","Date","parse"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport spin from \"./images/bigspin.svg\";\nimport Edit from \"./images/edit.svg\";\nimport { Button, TextArea, Icon, LabelTag } from \"./App\";\nimport { ReactComponent as Tick } from \"./images/tick.svg\";\nimport deleteSvg from \"./images/Vector.svg\";\nconst Todo = ({ todo, onDelete, completeHandler, editToggle }) => {\n  const [newName, setNewName] = useState(todo.name);\n  const edit = (e) => {\n    setNewName(e.target.value);\n  };\n  return (\n    <div id=\"todo\" className=\"todo\">\n      <div className={`${todo.isLoading && \"blur\"}`}>\n        {todo.isEdit === true ? (\n          <TextArea\n            id=\"editName\"\n            className=\"editName\"\n            value={newName}\n            onChange={edit}\n            autoFocus\n            onFocus={(e) => {\n              var val = e.target.value;\n              e.target.value = \"\";\n              e.target.value = val;\n            }}\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\") {\n                e.preventDefault();\n                editToggle(todo.id);\n              }\n            }}\n          />\n        ) : (\n          <div>\n            <LabelTag\n              id=\"showName\"\n              className={`${todo.completed_on && \"completed\"}`}\n            >\n              {todo.name}\n            </LabelTag>\n          </div>\n        )}\n        <div className=\"createdAt\">\n          <div>\n            <LabelTag>created_at: {todo.created_at}</LabelTag>\n          </div>\n        </div>\n        <div className=\"boxedButtonCompletedOn\">\n          <div className=\"allBoxedButon\">\n            {todo.isEdit && (\n              <Button\n                className=\"saveButton btn\"\n                onClick={() => editToggle(todo.id)}\n              >\n                Save\n              </Button>\n            )}\n            {!todo.completed_on && (\n              <Button\n                className=\"boxedButton \"\n                onClick={() => {\n                  completeHandler(todo.id);\n                }}\n              >\n                <Icon src={Tick} />\n              </Button>\n            )}\n            {!todo.completed_on && !todo.isEdit && (\n              <Button\n                onClick={() => editToggle(todo.id)}\n                className=\"boxedButton \"\n              >\n                <Icon src={Edit} alt=\"Edit\" />\n              </Button>\n            )}\n            <Button className=\"boxedButton\" onClick={() => onDelete(todo.id)}>\n              <Icon src={deleteSvg} alt=\"Delete\" />\n            </Button>\n          </div>\n          {todo.completed_on && (\n            <LabelTag className=\"completedOn\">\n              completed in{\" \"}\n              {Math.ceil(\n                Math.abs(\n                  Date.parse(todo.completed_on) - Date.parse(todo.created_at),\n                ) /\n                  (1000 * 60 * 60 * 24),\n              )}{\" \"}\n              days\n            </LabelTag>\n          )}\n        </div>\n      </div>\n      {todo.isLoading && (\n        <Icon className=\"spinning rotateDiv\" src={spin} alt=\"spin\" />\n      )}\n    </div>\n  );\n};\n\nexport default Todo;\n"]},"metadata":{},"sourceType":"module"}