{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_HEADERS } from './constants';\nimport { get, post, put, remove } from './fetch';\nimport { resolveFetch } from './helpers';\nexport class StorageBucketApi {\n  constructor(url) {\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let fetch = arguments.length > 2 ? arguments[2] : undefined;\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Retrieves the details of all Storage buckets within an existing product.\n   */\n\n\n  listBuckets() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n\n\n  getBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket/${id}`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @returns newly created bucket id\n   */\n\n\n  createBucket(id) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      public: false\n    };\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket`, {\n          id,\n          name: id,\n          public: options.public\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: data.name,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Updates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   */\n\n\n  updateBucket(id, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {\n          id,\n          name: id,\n          public: options.public\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n\n\n  emptyBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n\n\n  deleteBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["DEFAULT_HEADERS","get","post","put","remove","resolveFetch","StorageBucketApi","constructor","url","headers","fetch","Object","listBuckets","data","error","getBucket","id","createBucket","options","public","name","updateBucket","emptyBucket","deleteBucket"],"sources":["/Users/mridha/Todo_in_React/todo/node_modules/@supabase/storage-js/src/lib/StorageBucketApi.ts"],"sourcesContent":["import { DEFAULT_HEADERS } from './constants'\nimport { Fetch, get, post, put, remove } from './fetch'\nimport { resolveFetch } from './helpers'\nimport { Bucket } from './types'\n\nexport class StorageBucketApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected fetch: Fetch\n\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Retrieves the details of all Storage buckets within an existing product.\n   */\n  async listBuckets(): Promise<{ data: Bucket[] | null; error: Error | null }> {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n  async getBucket(id: string): Promise<{ data: Bucket | null; error: Error | null }> {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @returns newly created bucket id\n   */\n  async createBucket(\n    id: string,\n    options: { public: boolean } = { public: false }\n  ): Promise<{ data: string | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket`,\n        { id, name: id, public: options.public },\n        { headers: this.headers }\n      )\n      return { data: data.name, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Updates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   */\n  async updateBucket(\n    id: string,\n    options: { public: boolean }\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await put(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        { id, name: id, public: options.public },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n  async emptyBucket(\n    id: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket/${id}/empty`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n  async deleteBucket(\n    id: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}