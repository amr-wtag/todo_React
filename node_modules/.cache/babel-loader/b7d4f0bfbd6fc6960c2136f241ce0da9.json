{"ast":null,"code":"var _jsxFileName = \"/Users/mridha/Todo_in_React/todo/src/components/Todo.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { TextArea } from \"./TextArea\";\nimport { Icon } from \"./Icon\";\nimport { Tag } from \"./Tag\";\nimport { Button } from \"./Button\";\nimport { format } from \"date-fns\";\nimport { supabase } from \"../config/apiClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Todo = _ref => {\n  _s();\n\n  let {\n    todo,\n    onRemoveItem,\n    removeCompleteFromIncomplete,\n    toasts,\n    setToasts,\n    dataCount,\n    setDataCount,\n    flag\n  } = _ref;\n  const [newName, setNewName] = useState(todo.name);\n  const [showEdit, setShowEdit] = useState(false);\n  const [showLoading, setShowLoading] = useState(false);\n\n  const editToggle = e => {\n    setShowEdit(!showEdit);\n  };\n\n  const edit = e => {\n    setNewName(e.target.value);\n  }; // Delete task\n\n\n  const deletetodo = id => {\n    setShowLoading(true);\n    let error;\n    setTimeout(() => {\n      if (error !== null) {\n        onRemoveItem(id);\n        setDataCount(dataCount - 1);\n      } // toaster\n\n\n      setShowLoading(false);\n    }, 500);\n  }; // on Complete\n\n\n  const completeHandler = async e => {\n    setShowLoading(true);\n    const dateValue = new Date(Date.now());\n    const {\n      data,\n      error\n    } = await supabase.from(\"ReactTodo\").update({\n      completed_on: dateValue\n    }).match({\n      id: todo.id\n    });\n\n    if (error === null) {\n      todo.completed_on = data[0][\"completed_on\"];\n      if (flag === \"incomplete\") removeCompleteFromIncomplete(todo.id);\n    }\n\n    setShowLoading(false);\n    let newToast = {\n      id: uuidv4(),\n      type: error ? \"error\" : \"success\",\n      message: error ? error : \"Task Complted\"\n    };\n    let allToast = [...toasts];\n    allToast.push(newToast);\n    setToasts(allToast);\n  };\n\n  const editValue = async e => {\n    // setNewName(newName.trim().replace(/\\s+/g, \" \"));\n    if (newName.trim().replace(/\\s+/g, \" \").length > 2 && todo.name !== newName.trim().replace(/\\s+/g, \" \")) {\n      setShowLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.from(\"ReactTodo\").update({\n        name: newName.trim().replace(/\\s+/g, \" \")\n      }).match({\n        id: todo.id\n      });\n\n      if (error === null) {\n        todo.name = newName.trim().replace(/\\s+/g, \" \");\n        setNewName(newName.trim().replace(/\\s+/g, \" \"));\n      }\n\n      editToggle();\n      setShowLoading(false);\n      let newToast = {\n        id: uuidv4(),\n        type: error ? \"error\" : \"success\",\n        message: error ? error : \"Task Edited\"\n      };\n      let allToast = [...toasts];\n      allToast.push(newToast);\n      setToasts(allToast);\n    } else {\n      setNewName(newName.trim().replace(/\\s+/g, \" \"));\n      editToggle();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"todo\",\n    className: \"todo\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [showEdit === true ? /*#__PURE__*/_jsxDEV(TextArea, {\n        id: \"editName\",\n        className: `editName ${(todo.isLoading || showLoading) && \"blur\"}`,\n        value: newName,\n        onChange: edit,\n        readOnly: showLoading,\n        autoFocus: true,\n        onFocus: e => {\n          var val = e.target.value;\n          e.target.value = \"\";\n          e.target.value = val;\n        },\n        onKeyPress: e => {\n          if (e.key === \"Enter\") {\n            e.preventDefault();\n            editValue(todo.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Tag, {\n          id: \"showName\",\n          className: `${todo.completed_on && \"completed\"} ${(todo.isLoading || showLoading) && \"blur\"}`,\n          children: todo.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), !showEdit && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `createdAt ${(todo.isLoading || showLoading) && \"blur\"}`,\n        children: [\"Created At: \", format(new Date(todo.created_at), \"dd.MM.yy\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `boxedButtonCompletedOn ${(todo.isLoading || showLoading) && \"blur\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"allBoxedButon\",\n        children: [showEdit && /*#__PURE__*/_jsxDEV(Button, {\n          className: \"saveButton \",\n          onClick: () => editValue(todo.id),\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), !todo.completed_on && /*#__PURE__*/_jsxDEV(Button, {\n          className: \"boxedButton \",\n          onClick: () => {\n            completeHandler(todo.id);\n          },\n          children: /*#__PURE__*/_jsxDEV(Icon, {\n            src: \"Tick\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), !todo.completed_on && !showEdit && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: editToggle,\n          className: \"boxedButton \",\n          children: /*#__PURE__*/_jsxDEV(Icon, {\n            src: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"boxedButton\",\n          onClick: () => deletetodo(todo.id),\n          children: /*#__PURE__*/_jsxDEV(Icon, {\n            src: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), todo.completed_on && /*#__PURE__*/_jsxDEV(Tag, {\n        className: \"completedOn\",\n        children: [\"Completed in\", \" \", Math.ceil(Math.abs(Date.parse(todo.completed_on) - Date.parse(todo.created_at)) / (1000 * 60 * 60 * 24)), \" \", \"days\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), (todo.isLoading || showLoading) && /*#__PURE__*/_jsxDEV(Icon, {\n      className: \"spinning rotateDiv\",\n      src: \"Spin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Todo, \"0MXxhRpQq0tD+DeuLQRhBlyxOzM=\");\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/mridha/Todo_in_React/todo/src/components/Todo.jsx"],"names":["useState","v4","uuidv4","TextArea","Icon","Tag","Button","format","supabase","Todo","todo","onRemoveItem","removeCompleteFromIncomplete","toasts","setToasts","dataCount","setDataCount","flag","newName","setNewName","name","showEdit","setShowEdit","showLoading","setShowLoading","editToggle","e","edit","target","value","deletetodo","id","error","setTimeout","completeHandler","dateValue","Date","now","data","from","update","completed_on","match","newToast","type","message","allToast","push","editValue","trim","replace","length","isLoading","val","key","preventDefault","created_at","Math","ceil","abs","parse"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { TextArea } from \"./TextArea\";\nimport { Icon } from \"./Icon\";\nimport { Tag } from \"./Tag\";\nimport { Button } from \"./Button\";\nimport { format } from \"date-fns\";\nimport { supabase } from \"../config/apiClient\";\nconst Todo = ({\n  todo,\n  onRemoveItem,\n  removeCompleteFromIncomplete,\n  toasts,\n  setToasts,\n  dataCount,\n  setDataCount,\n  flag,\n}) => {\n  const [newName, setNewName] = useState(todo.name);\n  const [showEdit, setShowEdit] = useState(false);\n  const [showLoading, setShowLoading] = useState(false);\n  const editToggle = (e) => {\n    setShowEdit(!showEdit);\n  };\n  const edit = (e) => {\n    setNewName(e.target.value);\n  };\n  // Delete task\n  const deletetodo = (id) => {\n    setShowLoading(true);\n    let error;\n    setTimeout(() => {\n      if (error !== null) {\n        onRemoveItem(id);\n        setDataCount(dataCount - 1);\n      }\n      // toaster\n\n      setShowLoading(false);\n    }, 500);\n  };\n  // on Complete\n\n  const completeHandler = async (e) => {\n    setShowLoading(true);\n    const dateValue = new Date(Date.now());\n    const { data, error } = await supabase\n      .from(\"ReactTodo\")\n      .update({ completed_on: dateValue })\n      .match({ id: todo.id });\n    if (error === null) {\n      todo.completed_on = data[0][\"completed_on\"];\n      if (flag === \"incomplete\") removeCompleteFromIncomplete(todo.id);\n    }\n\n    setShowLoading(false);\n    let newToast = {\n      id: uuidv4(),\n      type: error ? \"error\" : \"success\",\n      message: error ? error : \"Task Complted\",\n    };\n    let allToast = [...toasts];\n    allToast.push(newToast);\n    setToasts(allToast);\n  };\n\n  const editValue = async (e) => {\n    // setNewName(newName.trim().replace(/\\s+/g, \" \"));\n    if (\n      newName.trim().replace(/\\s+/g, \" \").length > 2 &&\n      todo.name !== newName.trim().replace(/\\s+/g, \" \")\n    ) {\n      setShowLoading(true);\n\n      const { data, error } = await supabase\n        .from(\"ReactTodo\")\n        .update({ name: newName.trim().replace(/\\s+/g, \" \") })\n        .match({ id: todo.id });\n      if (error === null) {\n        todo.name = newName.trim().replace(/\\s+/g, \" \");\n        setNewName(newName.trim().replace(/\\s+/g, \" \"));\n      }\n      editToggle();\n      setShowLoading(false);\n      let newToast = {\n        id: uuidv4(),\n        type: error ? \"error\" : \"success\",\n        message: error ? error : \"Task Edited\",\n      };\n      let allToast = [...toasts];\n      allToast.push(newToast);\n      setToasts(allToast);\n    } else {\n      setNewName(newName.trim().replace(/\\s+/g, \" \"));\n      editToggle();\n    }\n  };\n\n  return (\n    <div id=\"todo\" className=\"todo\">\n      <div>\n        {showEdit === true ? (\n          <TextArea\n            id=\"editName\"\n            className={`editName ${(todo.isLoading || showLoading) && \"blur\"}`}\n            value={newName}\n            onChange={edit}\n            readOnly={showLoading}\n            autoFocus\n            onFocus={(e) => {\n              var val = e.target.value;\n              e.target.value = \"\";\n              e.target.value = val;\n            }}\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\") {\n                e.preventDefault();\n                editValue(todo.id);\n              }\n            }}\n          />\n        ) : (\n          <div>\n            <Tag\n              id=\"showName\"\n              className={`${todo.completed_on && \"completed\"} ${\n                (todo.isLoading || showLoading) && \"blur\"\n              }`}\n            >\n              {todo.name}\n            </Tag>\n          </div>\n        )}\n        {!showEdit && (\n          <div\n            className={`createdAt ${(todo.isLoading || showLoading) && \"blur\"}`}\n          >\n            Created At: {format(new Date(todo.created_at), \"dd.MM.yy\")}\n          </div>\n        )}\n      </div>\n      <div\n        className={`boxedButtonCompletedOn ${\n          (todo.isLoading || showLoading) && \"blur\"\n        }`}\n      >\n        <div className=\"allBoxedButon\">\n          {showEdit && (\n            <Button className=\"saveButton \" onClick={() => editValue(todo.id)}>\n              Save\n            </Button>\n          )}\n          {!todo.completed_on && (\n            <Button\n              className=\"boxedButton \"\n              onClick={() => {\n                completeHandler(todo.id);\n              }}\n            >\n              <Icon src=\"Tick\" />\n            </Button>\n          )}\n          {!todo.completed_on && !showEdit && (\n            <Button onClick={editToggle} className=\"boxedButton \">\n              <Icon src=\"Edit\" />\n            </Button>\n          )}\n          <Button className=\"boxedButton\" onClick={() => deletetodo(todo.id)}>\n            <Icon src=\"Delete\" />\n          </Button>\n        </div>\n        {todo.completed_on && (\n          <Tag className=\"completedOn\">\n            Completed in{\" \"}\n            {Math.ceil(\n              Math.abs(\n                Date.parse(todo.completed_on) - Date.parse(todo.created_at),\n              ) /\n                (1000 * 60 * 60 * 24),\n            )}{\" \"}\n            days\n          </Tag>\n        )}\n      </div>\n\n      {(todo.isLoading || showLoading) && (\n        <Icon className=\"spinning rotateDiv\" src=\"Spin\" />\n      )}\n    </div>\n  );\n};\n\nexport default Todo;\n"]},"metadata":{},"sourceType":"module"}